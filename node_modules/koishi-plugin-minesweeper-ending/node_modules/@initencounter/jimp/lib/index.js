"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const koishi_1 = require("koishi");
class Jimp extends koishi_1.Service {
    FONT_SANS_8_BLACK;
    FONT_SANS_10_BLACK;
    FONT_SANS_12_BLACK;
    FONT_SANS_14_BLACK;
    FONT_SANS_16_BLACK;
    FONT_SANS_32_BLACK;
    FONT_SANS_64_BLACK;
    FONT_SANS_128_BLACK;
    FONT_SANS_8_WHITE;
    FONT_SANS_16_WHITE;
    FONT_SANS_32_WHITE;
    FONT_SANS_64_WHITE;
    FONT_SANS_128_WHITE;
    AUTO;
    // blend modes
    BLEND_SOURCE_OVER;
    BLEND_DESTINATION_OVER;
    BLEND_MULTIPLY;
    BLEND_ADD;
    BLEND_SCREEN;
    BLEND_OVERLAY;
    BLEND_DARKEN;
    BLEND_LIGHTEN;
    BLEND_HARDLIGHT;
    BLEND_DIFFERENCE;
    BLEND_EXCLUSION;
    // Align modes for cover, contain, bit masks
    HORIZONTAL_ALIGN_LEFT;
    HORIZONTAL_ALIGN_CENTER;
    HORIZONTAL_ALIGN_RIGHT;
    VERTICAL_ALIGN_TOP;
    VERTICAL_ALIGN_MIDDLE;
    VERTICAL_ALIGN_BOTTOM;
    // Edge Handling
    EDGE_EXTEND;
    EDGE_WRAP;
    EDGE_CROP;
    MIME_BMP;
    MIME_X_MS_BMP;
    MIME_GIF;
    MIME_JPEG;
    MIME_PNG;
    MIME_TIFF;
    PNG_FILTER_AUTO;
    PNG_FILTER_NONE;
    PNG_FILTER_SUB;
    PNG_FILTER_UP;
    PNG_FILTER_AVERAGE;
    PNG_FILTER_PATH;
    RESIZE_NEAREST_NEIGHBOR;
    RESIZE_BILINEAR;
    RESIZE_BICUBIC;
    RESIZE_HERMITE;
    RESIZE_BEZIER;
    // 中文zit
    PingFang_24_BLACK;
    constructor(ctx) {
        super(ctx, 'jimp', true);
    }
}
exports.default = Jimp;
