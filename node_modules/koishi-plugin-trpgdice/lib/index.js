"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apply = exports.Config = exports.name = void 0;
const koishi_1 = require("koishi");
const roll_1 = require("./model/roll");
const data_1 = require("./model/data");
exports.name = 'trpgdice';
// export const using = ['database']
exports.Config = koishi_1.Schema.object({
    // 加限制是因为不建议数字太大，字符长度可能会爆
    defaultDiceFices: koishi_1.Schema.number().default(100).max(1000).min(2),
    facesMax: koishi_1.Schema.number().default(100).max(1000).min(2),
    timesMax: koishi_1.Schema.number().default(100).max(100).min(1),
    partsMax: koishi_1.Schema.number().default(5).min(20).min(2),
});
function apply(ctx, config) {
    (0, data_1.setDefaultConfig)(config);
    const zh = require("./locales/zh");
    ctx.i18n.define("zh", zh);
    ctx.command("roll <exp:string> [reason:string]", { params: config })
        .userFields(['name'])
        .shortcut(roll_1.SanpshotRollRegExp)
        .action(({ session }, exp, reason) => (0, roll_1.roll)(session, exp, reason));
    // coc检定，同理复杂化
    ctx.command("rcheck <attribute:posint> [reason:string]")
        .userFields(['name'])
        .shortcut(/^.rc( ([1-9][0-9]?))( (.+))?$/, { args: ["$2", "$4"] })
        .action(({ session }, attribute, reason) => (0, roll_1.rollCheck)(session, attribute, reason));
    // 暗骰，由于平台风控原因，实际上不执行
    ctx.command("rhide <exp:string>")
        .userFields(['name'])
        .shortcut(/^.rh(([0-9]{1,3})?d([0-9]{1,4})?)?$/, { args: ['$1'] })
        .action(({ session }) => {
        if (session.guild)
            return session.text(".action", { dm: (0, data_1.getNickname)(session) });
        return session.text(".noaction");
    });
    // D&D人物作成
    ctx.command("dnd [num:number]")
        .userFields(['name'])
        .shortcut(/^.dnd( ([1-9][0-9]?))?/, { args: ["$2"] })
        .action(({ session }, num) => (0, roll_1.dndChar)(session, num));
    // 扔硬币
    ctx.command("rcoin")
        .userFields(['name'])
        .shortcut(/^.coin$/)
        .action(({ session }) => (0, roll_1.rollCoin)(session));
}
exports.apply = apply;
