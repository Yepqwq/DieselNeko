"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inject = exports.name = void 0;
exports.apply = apply;
const jsx_runtime_1 = require("@satorijs/element/jsx-runtime");
exports.name = 'telemetry-id-client';
exports.inject = ['notifier'];
const loading = '正在获取……';
const render = (state, handleDisplay) => {
    const header = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("br", {}), (0, jsx_runtime_1.jsx)("b", { children: "\u5B9E\u4F8B\u4FE1\u606F\u7BA1\u7406" }), (0, jsx_runtime_1.jsx)("br", {})] }));
    if (state.status === 'failed')
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [header, (0, jsx_runtime_1.jsx)("p", { children: "\u8BBE\u5907\u4FE1\u606F\u83B7\u53D6\u5931\u8D25\u3002\u8BF7\u67E5\u9605\u65E5\u5FD7\u4EE5\u4E86\u89E3\u8BE6\u60C5\u3002" })] }));
    const footer = ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("button", { onClick: handleDisplay, children: state.display ? '隐藏' : '显示' }) }));
    let info = ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsxs)("p", { children: ["\u6838\u5FC3\u8BBE\u5907 ID\uFF1A", state.display ? state.cmid : '*'.repeat(64), (0, jsx_runtime_1.jsx)("br", {}), "\u8BBE\u5907 ID\uFF1A", state.display ? state.mid : '*'.repeat(64), (0, jsx_runtime_1.jsx)("br", {}), "\u5305 ID\uFF1A", state.display ? state.bundleId : '*'.repeat(64), (0, jsx_runtime_1.jsx)("br", {}), "\u5B9E\u4F8B ID\uFF1A", state.display ? state.instanceId : '*'.repeat(64), (0, jsx_runtime_1.jsx)("br", {}), "\u4F1A\u8BDD ID\uFF1A", state.display ? state.sessionId : '*'.repeat(64)] }) }));
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [header, info, footer] }));
};
function apply(ctx, telemetryId) {
    const notifier = ctx.notifier.create();
    const state = {
        status: 'normal',
        display: false,
        cmid: loading,
        mid: loading,
        bundleId: loading,
        instanceId: loading,
        sessionId: loading,
    };
    const handleDisplay = () => {
        state.display = !state.display;
        update();
    };
    const update = () => {
        notifier.update(render(state, handleDisplay));
    };
    update();
    ctx.effect(() => {
        const listener = () => {
            state.cmid = telemetryId.cmid || loading;
            state.mid = telemetryId.mid || loading;
            state.bundleId = telemetryId.bundleId || loading;
            state.instanceId = telemetryId.instanceId || loading;
            state.sessionId = telemetryId.sessionId || loading;
            update();
        };
        telemetryId.on('update', listener);
        return () => telemetryId.off('update', listener);
    });
    ctx.effect(() => {
        const listener = () => {
            state.status = 'failed';
            update();
        };
        telemetryId.on('failed', listener);
        return () => telemetryId.off('failed', listener);
    });
}
