"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryId = void 0;
const client_1 = require("../client");
const types_1 = require("../types");
const mid_1 = require("../utils/id/mid");
const bundle_1 = require("./bundle");
class TelemetryId extends types_1.TypedEventEmitter {
    ctx;
    storage;
    constructor(ctx, storage) {
        super();
        this.ctx = ctx;
        this.storage = storage;
        void this.init();
        ctx.plugin(client_1.TelemetryIdClient, this);
    }
    cmid = undefined;
    menv = undefined;
    mid = undefined;
    bundleId = undefined;
    instanceId = undefined;
    sessionId = undefined;
    init = async () => {
        try {
            const { cmid, menv, mid } = await (0, mid_1.getMachineId)(this.ctx);
            this.cmid = cmid;
            this.menv = menv;
            this.mid = mid;
            this.emit('update');
            this.emit('machineReady');
            this.ctx.plugin(bundle_1.TelemetryBundle, this);
        }
        catch (e) {
            this.emit('failed');
        }
    };
    setBundleId = (bundleId) => {
        this.bundleId = bundleId;
        this.emit('update');
    };
    setInstanceId = (instanceId) => {
        this.instanceId = instanceId;
        this.emit('update');
    };
    setSessionId = (sessionId) => {
        this.sessionId = sessionId;
        this.emit('update');
    };
    setFailed = () => this.emit('failed');
}
exports.TelemetryId = TelemetryId;
