import type { Context } from 'koishi';
import { TypedEventEmitter } from '../types';
import type { TelemetryStorage } from './storage';
export type TelemetryIdEvents = {
    update: () => void;
    failed: () => void;
    machineReady: () => void;
};
export declare class TelemetryId extends TypedEventEmitter<TelemetryIdEvents> {
    private ctx;
    storage: TelemetryStorage;
    constructor(ctx: Context, storage: TelemetryStorage);
    cmid: string | undefined;
    menv: string | undefined;
    mid: string | undefined;
    bundleId: string | undefined;
    instanceId: string | undefined;
    sessionId: string | undefined;
    private init;
    setBundleId: (bundleId: string) => void;
    setInstanceId: (instanceId: string) => void;
    setSessionId: (sessionId: string) => void;
    setFailed: () => boolean;
}
