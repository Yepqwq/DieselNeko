"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryInstance = void 0;
const koishi_1 = require("koishi");
const ienv_1 = require("../utils/id/ienv");
const session_1 = require("./session");
class TelemetryInstance {
    ctx;
    id;
    constructor(ctx, id) {
        this.ctx = ctx;
        this.id = id;
        this.#l = ctx.logger('telemetry/instance');
        this.storage = id.storage;
        this.basis = this.storage.basis;
        this.post = this.basis.post;
        void this.#init();
    }
    #l;
    storage;
    basis;
    post;
    #init = async () => {
        try {
            const instanceEnv = await (0, ienv_1.getInstanceEnv)(this.ctx);
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
            const result = (await this.post('/inst', {
                coreMachineId: this.id.cmid,
                machineEnv: this.id.menv,
                machineId: this.id.mid,
                instanceEnv,
                bundleId: this.storage.data.bundleId,
            }));
            if (!result.instanceId || !result.chToken) {
                this.id.setFailed();
                return;
            }
            this.id.setInstanceId(result.instanceId);
            if (!this.storage.data.instanceId) {
                await this.storage.saveInstanceId(result.instanceId);
            }
            else if (result.instanceId !== this.storage.data.instanceId) {
                const oldInstanceId = this.storage.data.instanceId;
                await this.storage.saveInstanceId(result.instanceId);
                void this.post('/instch', {
                    chToken: result.chToken,
                    oldInstanceId,
                }).catch(() => this.#l.debug('instch failed'));
            }
            await (0, koishi_1.sleep)(5000);
            this.ctx.plugin(session_1.TelemetrySession, this.id);
        }
        catch (e) {
            this.#l.debug('instance failed');
            this.id.setFailed();
            return;
        }
    };
}
exports.TelemetryInstance = TelemetryInstance;
