"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryBasis = void 0;
const node_util_1 = require("node:util");
const xsrf_1 = require("../utils/xsrf");
const storage_1 = require("./storage");
class TelemetryBasis {
    root;
    constructor(ctx, root) {
        this.root = root;
        this.#l = ctx.logger('telemetry/basis');
        this.#postLogger = ctx.logger('telemetry/post');
        this.http = ctx.http.extend({
            endpoint: 'https://d.ilharper.com/cordis/v1',
        });
        this.ready = this.init();
        if (root.config.mode === 'readonly')
            return;
        ctx.plugin(storage_1.TelemetryStorage, this);
    }
    #l;
    init = async () => {
        try {
            this.hello = await this.post('/hello', {});
            return true;
        }
        catch (e) {
            this.#l.debug('hello failed');
            return false;
        }
    };
    http;
    hello = undefined;
    ready;
    whenReady = () => this.ready;
    #postLogger;
    post = async (url, data, config) => {
        try {
            const result = (await this.http.post(url, data, {
                ...(config || {}),
                headers: {
                    ...(config?.headers || {}),
                    'X-XSRF-TOKEN': (0, xsrf_1.getXsrfToken)(),
                },
            }));
            this.#postLogger.debug(`${url} success, data:`);
            this.#postLogger.debug(data);
            this.#postLogger.debug('response:');
            this.#postLogger.debug(result);
            return result;
        }
        catch (e) {
            this.#postLogger.debug(`${url} failed:`);
            this.#postLogger.debug((0, node_util_1.inspect)(e));
            this.#postLogger.debug('data:');
            this.#postLogger.debug(data);
            throw new Error('出现了一个异常（这不会影响 Koishi 的正常运行）。');
        }
    };
}
exports.TelemetryBasis = TelemetryBasis;
