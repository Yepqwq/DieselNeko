import type { Context } from 'koishi';
import type { O } from 'ts-toolbelt';
import type { Root } from '../types';
import type { TelemetryBasis } from './basis';
export type TelemetryData = O.Partial<TelemetryDataIntl, 'deep'>;
interface TelemetryDataIntl {
    nonoob: boolean;
    privacy: number;
    readAlerts: number[];
    bundleId: string;
    instanceId: string;
}
export declare class TelemetryStorage {
    #private;
    private ctx;
    basis: TelemetryBasis;
    constructor(ctx: Context, basis: TelemetryBasis);
    private init;
    private privacyReady;
    private commitPrivacyReady;
    private storagePath;
    data: TelemetryData;
    root: Root;
    private save;
    commitPrivacy: () => Promise<void>;
    saveBundleId: (bundleId: string) => Promise<void>;
    saveInstanceId: (instanceId: string) => Promise<void>;
}
export {};
