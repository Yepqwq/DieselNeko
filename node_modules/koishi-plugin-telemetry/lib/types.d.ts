import { Schema } from 'koishi';
import EventEmitter from 'node:events';
export interface Config {
    mode: 'off' | 'readonly' | 'on';
}
export declare const Config: Schema<Config>;
export interface Root {
    config: Config;
    update: (configModifier: (config: Config) => Config) => void;
}
type EmittedEvents = Record<string | symbol, (...args: unknown[]) => unknown>;
export interface TypedEventEmitter<ES extends EmittedEvents> {
    on<E extends keyof ES>(event: E, listener: ES[E]): this;
    off<E extends keyof ES>(event: E, listener: ES[E]): this;
    once<E extends keyof ES>(event: E, listener: ES[E]): this;
    emit<E extends keyof ES>(event: E, ...args: Parameters<ES[E]>): boolean;
}
export declare class TypedEventEmitter<ES extends EmittedEvents> extends EventEmitter {
}
export {};
