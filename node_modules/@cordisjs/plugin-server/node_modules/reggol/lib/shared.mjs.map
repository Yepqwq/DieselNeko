{
  "version": 3,
  "sources": ["../src/shared.ts"],
  "sourcesContent": ["import { stdout } from 'supports-color'\nimport { Time } from 'cosmokit'\n\nconst c16 = [6, 2, 3, 4, 5, 1]\nconst c256 = [\n  20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62,\n  63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113,\n  129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n  169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200,\n  201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221,\n]\n\nfunction isAggregateError(error: any): error is Error & { errors: Error[] } {\n  return error instanceof Error && Array.isArray((error as any)['errors'])\n}\n\nnamespace Logger {\n  export interface LevelConfig {\n    base: number\n    [K: string]: Level\n  }\n\n  export type Level = number | LevelConfig\n  export type Function = (format: any, ...param: any[]) => void\n  export type Type = 'success' | 'error' | 'info' | 'warn' | 'debug'\n  export type Formatter = (value: any, target: Logger.Target, logger: Logger) => any\n\n  export interface LabelStyle {\n    width?: number\n    margin?: number\n    align?: 'left' | 'right'\n  }\n\n  export interface Record {\n    id: number\n    name: string\n    type: Logger.Type\n    level: number\n    content: string\n    timestamp: number\n  }\n\n  export interface Target {\n    /**\n     * - 0: no color support\n     * - 1: 16 color support\n     * - 2: 256 color support\n     * - 3: truecolor support\n     */\n    colors?: false | number\n    showDiff?: boolean\n    showTime?: string\n    label?: LabelStyle\n    maxLength?: number\n    record?(record: Record): void\n    print?(text: string): void\n  }\n}\n\ninterface Logger extends Record<Logger.Type, Logger.Function> {}\n\nclass Logger {\n  // log levels\n  static readonly SILENT = 0\n  static readonly SUCCESS = 1\n  static readonly ERROR = 1\n  static readonly INFO = 2\n  static readonly WARN = 2\n  static readonly DEBUG = 3\n\n  // global config\n  static id = 0\n  static timestamp = 0\n  static targets: Logger.Target[] = [{\n    colors: stdout && stdout.level,\n    print(text) {\n      console.log(text)\n    },\n  }]\n\n  // global registry\n  static formatters: Record<string, Logger.Formatter> = Object.create(null)\n  static instances: Record<string, Logger> = Object.create(null)\n\n  static format(name: string, formatter: Logger.Formatter) {\n    this.formatters[name] = formatter\n  }\n\n  static levels: Logger.LevelConfig = {\n    base: 2,\n  }\n\n  static color(target: Logger.Target, code: number, value: any, decoration = '') {\n    if (!target.colors) return '' + value\n    return `\\u001b[3${code < 8 ? code : '8;5;' + code}${target.colors >= 2 ? decoration : ''}m${value}\\u001b[0m`\n  }\n\n  static code(name: string, target: Logger.Target) {\n    let hash = 0\n    for (let i = 0; i < name.length; i++) {\n      hash = ((hash << 3) - hash) + name.charCodeAt(i)\n      hash |= 0\n    }\n    const colors = !target.colors ? [] : target.colors >= 2 ? c256 : c16\n    return colors[Math.abs(hash) % colors.length]\n  }\n\n  static render(target: Logger.Target, record: Logger.Record) {\n    const prefix = `[${record.type[0].toUpperCase()}]`\n    const space = ' '.repeat(target.label?.margin ?? 1)\n    let indent = 3 + space.length, output = ''\n    if (target.showTime) {\n      indent += target.showTime.length + space.length\n      output += Logger.color(target, 8, Time.template(target.showTime)) + space\n    }\n    const code = Logger.code(record.name, target)\n    const label = Logger.color(target, code, record.name, ';1')\n    const padLength = (target.label?.width ?? 0) + label.length - record.name.length\n    if (target.label?.align === 'right') {\n      output += label.padStart(padLength) + space + prefix + space\n      indent += (target.label.width ?? 0) + space.length\n    } else {\n      output += prefix + space + label.padEnd(padLength) + space\n    }\n    output += record.content.replace(/\\n/g, '\\n' + ' '.repeat(indent))\n    if (target.showDiff) {\n      const diff = Logger.timestamp && record.timestamp - Logger.timestamp\n      output += Logger.color(target, code, ' +' + Time.format(diff))\n    }\n    return output\n  }\n\n  constructor(public name: string) {\n    if (name in Logger.instances) return Logger.instances[name]\n\n    Logger.instances[name] = this\n    this.createMethod('success', Logger.SUCCESS)\n    this.createMethod('error', Logger.ERROR)\n    this.createMethod('info', Logger.INFO)\n    this.createMethod('warn', Logger.WARN)\n    this.createMethod('debug', Logger.DEBUG)\n  }\n\n  extend = (namespace: string) => {\n    return new Logger(`${this.name}:${namespace}`)\n  }\n\n  warning = (format: any, ...args: any[]) => {\n    this.warn(format, ...args)\n  }\n\n  createMethod(type: Logger.Type, level: number) {\n    this[type] = (...args) => {\n      if (args.length === 1 && args[0] instanceof Error) {\n        if (args[0].cause) {\n          this[type](args[0].cause)\n        } else if (isAggregateError(args[0])) {\n          args[0].errors.forEach(error => this[type](error))\n          return\n        }\n      }\n\n      if (this.level < level) return\n      const id = ++Logger.id\n      const timestamp = Date.now()\n      for (const target of Logger.targets) {\n        const content = this.format(target, ...args)\n        const record: Logger.Record = { id, type, level, name: this.name, content, timestamp }\n        if (target.record) {\n          target.record(record)\n        } else {\n          const { print = console.log } = target\n          print(Logger.render(target, record))\n        }\n      }\n      Logger.timestamp = timestamp\n    }\n  }\n\n  private format(target: Logger.Target, ...args: any[]) {\n    if (args[0] instanceof Error) {\n      args[0] = args[0].stack || args[0].message\n      args.unshift('%s')\n    } else if (typeof args[0] !== 'string') {\n      args.unshift('%o')\n    }\n\n    let format: string = args.shift()\n    format = format.replace(/%([a-zA-Z%])/g, (match, char) => {\n      if (match === '%%') return '%'\n      const formatter = Logger.formatters[char]\n      if (typeof formatter === 'function') {\n        const value = args.shift()\n        return formatter(value, target, this)\n      }\n      return match\n    })\n\n    for (let arg of args) {\n      if (typeof arg === 'object' && arg) {\n        arg = Logger.formatters['o'](arg, target, this)\n      }\n      format += ' ' + arg\n    }\n\n    const { maxLength = 10240 } = target\n    return format.split(/\\r?\\n/g).map(line => {\n      return line.slice(0, maxLength) + (line.length > maxLength ? '...' : '')\n    }).join('\\n')\n  }\n\n  get level() {\n    const paths = this.name.split(':')\n    let config: Logger.Level = Logger.levels\n    do {\n      config = config[paths.shift()!] ?? config['base']\n    } while (paths.length && typeof config === 'object')\n    return config as number\n  }\n\n  set level(value) {\n    const paths = this.name.split(':')\n    let config = Logger.levels\n    while (paths.length > 1) {\n      const name = paths.shift()!\n      const value = config[name]\n      if (typeof value === 'object') {\n        config = value\n      } else {\n        config = config[name] = { base: value ?? config.base }\n      }\n    }\n    config[paths[0]] = value\n  }\n}\n\nLogger.format('s', (value) => value)\nLogger.format('d', (value) => +value)\nLogger.format('j', (value) => JSON.stringify(value))\nLogger.format('c', (value, target, logger) => {\n  return Logger.color(target, Logger.code(logger.name, target), value)\n})\nLogger.format('C', (value, target) => {\n  return Logger.color(target, 15, value, ';1')\n})\n\nexport = Logger\n"],
  "mappings": "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",
  "names": ["value"]
}
