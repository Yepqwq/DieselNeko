"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apply = exports.Config = exports.name = void 0;
const koishi_1 = require("koishi");
const fs = __importStar(require("fs"));
const node_path_1 = __importDefault(require("node:path"));
const node_url_1 = require("node:url");
exports.name = 'whateat-pic';
exports.Config = koishi_1.Schema.object({
    botname: koishi_1.Schema.string().description('机器人名字').default('bot')
});
function getRandomImage(dirPath) {
    // 读取目录中的所有文件名
    const fileNames = fs.readdirSync(dirPath);
    // 筛选出图片类型的文件名
    const imageFileNames = fileNames.filter((fileName) => {
        const extname = node_path_1.default.extname(fileName);
        return ['.jpg', '.jpeg', '.png'].includes(extname.toLowerCase());
    });
    // 如果没有找到符合条件的图片文件，返回null
    if (imageFileNames.length === 0) {
        return null;
    }
    // 随机选择一个图片文件名并返回其绝对路径
    const randomFileName = imageFileNames[Math.floor(Math.random() * imageFileNames.length)];
    const fileNameWithoutExt = node_path_1.default.basename(randomFileName, node_path_1.default.extname(randomFileName));
    return fileNameWithoutExt;
}
function apply(ctx, config) {
    const timeRegex = /^(早上|中午|晚上|早餐|午餐|晚餐|半夜|午夜|夜宵|今早|今晚|早饭|午饭|晚饭)(吃什么|喝什么)/;
    ctx.middleware(async (session, next) => {
        const match = session.content.match(timeRegex);
        if (match) {
            const time = match[1];
            const action = match[2].slice(0, 1);
            return await session.execute(`今天${action}什么`);
        }
        return next();
    });
    function generateAdviceMessage(type, imageDir) {
        return async ({ session }) => {
            const dir = __dirname + '/' + imageDir;
            const name = getRandomImage(dir);
            await session.send(`正在为你找好${type}的……`);
            //等待1s，防止图片发送过快
            await new Promise(resolve => setTimeout(resolve, 1000));
            return (0, koishi_1.h)('quote', { id: session.messageId }) + `${config.botname}推荐你${type}：\n✨${name}✨${(0, koishi_1.h)('image', { url: (0, node_url_1.pathToFileURL)(dir + '/' + name + '.jpg') })}`;
        };
    }
    ctx.command('今天吃什么', `让${config.botname}帮你推荐好吃的！`)
        .action(generateAdviceMessage("吃", "eat_pic"));
    ctx.command('今天喝什么', `让${config.botname}帮你推荐好喝的！`)
        .action(generateAdviceMessage("喝", "drink_pic"));
}
exports.apply = apply;
