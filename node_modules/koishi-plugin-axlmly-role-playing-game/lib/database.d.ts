import { Context } from 'koishi';
import { LevelInfo } from './index/level';
declare module 'koishi' {
    interface Tables {
        role_playing_game: Role_playing_game;
        role_playing_game_attach: Role_playing_game_attach;
        role_playing_game_cd: Role_playing_game_cd;
    }
}
export interface Role_playing_game {
    id: string;
    name: string;
    level: number;
    status: number;
    healthpoint: number;
    maxhealthpoint: number;
    healthpointEnd: number;
    magicpoint: number;
    maxmagicpoint: number;
    magicpointEnd: number;
    sturdypoint: number;
    stamina: number;
    dexterity: number;
    spiritualintuition: number;
    luckyvalue: number;
    intelligence: number;
    faith: number;
    attack: number;
    armourclass: number;
    physicaldefense: number;
    magicdefense: number;
    killnumber: number;
    coins: number;
    kudos: number;
    experiencepoint: number;
}
export interface Role_playing_game_attach {
    id: string;
    status: number;
    prefix: number;
    interlocutory: number;
    suffix: number;
    skillpoint: number;
    duels: number;
    resetproperties: number;
    skill1: number;
    skill2: number;
    skill3: number;
    primaryweapon: number;
    secondaryweapon: number;
    armour: number;
    racist: number;
    faith: number;
    profession: number;
    itembar: number[];
    armourbar: number[];
    skillbar: number[];
    prefixlibrary: number[];
    interlocutorylibrary: number[];
    suffixlibrary: number[];
}
export interface Role_playing_game_cd {
    id: string;
    status: number;
    statuscd: number;
    attackcd: number;
    duelscd: number;
    skillcd: number;
}
export declare class Rpgdata {
    ctx: Context;
    cfg: any;
    private arsenals;
    private armour;
    private skill;
    private store;
    constructor(context: Context, config: any);
    userdata(session: any, ctx: any): Promise<{
        level: any;
        status: any;
        healthpoint: any;
        maxhealthpoint: any;
        healthpointEnd: any;
        magicpoint: any;
        maxmagicpoint: any;
        magicpointEnd: any;
        sturdypoint: any;
        stamina: any;
        dexterity: any;
        spiritualintuition: any;
        luckyvalue: any;
        intelligence: any;
        faith: any;
        profession: any;
        attack: any;
        armourclass: any;
        physicaldefense: any;
        magicdefense: any;
        killnumber: any;
        coins: any;
        kudos: any;
        experiencepoint: any;
        prefix: any;
        interlocutory: any;
        suffix: any;
        skillpoint: any;
        duels: any;
        skill1: any;
        skill2: any;
        skill3: any;
        primaryweapon: any;
        secondaryweapon: any;
        armour: any;
        racist: any;
        faiths: any;
        itembar: any;
        armourbar: any;
        skillbar: any;
        prefixlibrary: any;
        interlocutorylibrary: any;
        suffixlibrary: any;
        attackcd: any;
        duelscd: any;
    }>;
    levelJudge(experiencepoint: number): LevelInfo;
    getGodId(id: number): {
        id: number;
        godhead: string;
        name: string;
        nameinfo: string;
        healthpoint: number;
        maxmagicpoint: number;
        sturdypoint: number;
        stamina: number;
        dexterity: number;
        spiritualintuition: number;
        luckyvalue: number;
        intelligence: number;
        faith: number;
        attack: number;
        armourclass: number;
        physicaldefense: number;
        magicdefense: number;
    };
    getRaceId(id: number): {
        id: number;
        name: string;
        innateskill1: string;
        innateskill1info1: string;
        innateskill2: string;
        innateskill1info2: string;
        innateskill3: string;
        innateskill1info3: string;
        healthpoint: number;
        maxmagicpoint: number;
        sturdypoint: number;
        stamina: number;
        dexterity: number;
        spiritualintuition: number;
        luckyvalue: number;
        intelligence: number;
        faith: number;
        attack: number;
        armourclass: number;
        physicaldefense: number;
        magicdefense: number;
    };
    getSkillsByIds(ids: any): {
        id: number;
        name: string;
        harm: number;
        advanced: number;
        types: number;
        price: number;
        consumptionofmagic: number;
        skillinfo: string;
        attckinfo: string;
        endinfo: string;
        needhealthpoint: number;
        needmaxmagicpoint: number;
        needsturdypoint: number;
        needstamina: number;
        needdexterity: number;
        needspiritualintuition: number;
        needluckyvalue: number;
        needintelligence: number;
        needfaith: number;
        needattack: number;
    }[];
    getSkillId(id: number): {
        id: number;
        name: string;
        harm: number;
        advanced: number;
        types: number;
        price: number;
        consumptionofmagic: number;
        skillinfo: string;
        attckinfo: string;
        endinfo: string;
        needhealthpoint: number;
        needmaxmagicpoint: number;
        needsturdypoint: number;
        needstamina: number;
        needdexterity: number;
        needspiritualintuition: number;
        needluckyvalue: number;
        needintelligence: number;
        needfaith: number;
        needattack: number;
    };
    getProfessionId(id: number): {
        id: number;
        name: string;
        healthpoint: number;
        maxmagicpoint: number;
        sturdypoint: number;
        stamina: number;
        dexterity: number;
        spiritualintuition: number;
        luckyvalue: number;
        intelligence: number;
        faith: number;
        attack: number;
        armourclass: number;
        physicaldefense: number;
        magicdefense: number;
    };
    getPrefixLibraryId(id: number): {
        id: number;
        name: string;
        healthpoint: number;
        maxmagicpoint: number;
        sturdypoint: number;
        stamina: number;
        dexterity: number;
        spiritualintuition: number;
        luckyvalue: number;
        intelligence: number;
        faith: number;
        attack: number;
        armourclass: number;
        physicaldefense: number;
        magicdefense: number;
    };
    getInterlocutorylibraryId(id: number): {
        id: number;
        name: string;
        healthpoint: number;
        maxmagicpoint: number;
        sturdypoint: number;
        stamina: number;
        dexterity: number;
        spiritualintuition: number;
        luckyvalue: number;
        intelligence: number;
        faith: number;
        attack: number;
        armourclass: number;
        physicaldefense: number;
        magicdefense: number;
    };
    getSuffixlibraryId(id: number): {
        id: number;
        name: string;
        healthpoint: number;
        maxmagicpoint: number;
        sturdypoint: number;
        stamina: number;
        dexterity: number;
        spiritualintuition: number;
        luckyvalue: number;
        intelligence: number;
        faith: number;
        attack: number;
        armourclass: number;
        physicaldefense: number;
        magicdefense: number;
    };
    getArsenalId(id: number): {
        id: number;
        name: string;
        path: string;
        harm: number;
        advanced: number;
        types: number;
        price: number;
        fightkirelease: number;
        magicrelease: number;
        needhealthpoint: number;
        needmaxmagicpoint: number;
        needsturdypoint: number;
        needstamina: number;
        needdexterity: number;
        needspiritualintuition: number;
        needluckyvalue: number;
        needintelligence: number;
        needfaith: number;
        needattack: number;
        healthpoint: number;
        maxmagicpoint: number;
        sturdypoint: number;
        stamina: number;
        dexterity: number;
        spiritualintuition: number;
        luckyvalue: number;
        intelligence: number;
        faith: number;
        attack: number;
        armourclass: number;
        physicaldefense: number;
        magicdefense: number;
    };
    getArmourId(id: number): {
        id: number;
        name: string;
        path: string;
        price: number;
        needhealthpoint: number;
        needmaxmagicpoint: number;
        needsturdypoint: number;
        needstamina: number;
        needdexterity: number;
        needspiritualintuition: number;
        needluckyvalue: number;
        needintelligence: number;
        needfaith: number;
        needattack: number;
        healthpoint: number;
        maxmagicpoint: number;
        sturdypoint: number;
        stamina: number;
        dexterity: number;
        spiritualintuition: number;
        luckyvalue: number;
        intelligence: number;
        faith: number;
        attack: number;
        armourclass: number;
        physicaldefense: number;
        magicdefense: number;
        types?: undefined;
    } | {
        id: number;
        name: string;
        path: string;
        price: number;
        types: number;
        needhealthpoint: number;
        needmaxmagicpoint: number;
        needsturdypoint: number;
        needstamina: number;
        needdexterity: number;
        needspiritualintuition: number;
        needluckyvalue: number;
        needintelligence: number;
        needfaith: number;
        needattack: number;
        healthpoint: number;
        maxmagicpoint: number;
        sturdypoint: number;
        stamina: number;
        dexterity: number;
        spiritualintuition: number;
        luckyvalue: number;
        intelligence: number;
        faith: number;
        attack: number;
        armourclass: number;
        physicaldefense: number;
        magicdefense: number;
    };
    seededRandom(seed: number): () => number;
    getRandomItems(items: any[], count: number, random: () => number, exclude?: any[]): any[];
    updateShopList(): void;
    getShopList(): {
        arsenals: any[];
        armour: any[];
        skill: any[];
    };
    dateToTimestamp(dateString: any): number;
    distributeValues(total: any, n: any, minValue: any, maxValue: any): any[];
}
