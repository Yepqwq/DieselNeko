import { Context, Dict, Schema, Bot, Universal } from 'koishi';
import { DataService } from '@koishijs/console';
declare class EnvInfoProvider extends DataService<Dict<Dict<string>>> {
    config: EnvInfoProvider.Config;
    private task;
    constructor(ctx: Context, config: EnvInfoProvider.Config);
    _get(): Promise<Dict<Dict<string>>>;
    get(): Promise<Dict<Dict<string>>>;
}
declare namespace EnvInfoProvider {
    interface Config {
    }
    const Config: Schema<Config>;
}
declare module 'koishi' {
    interface Bot {
        _messageSent: TickCounter;
        _messageReceived: TickCounter;
    }
}
declare class TickCounter {
    stop: () => void;
    private data;
    private tick;
    constructor(ctx: Context);
    add(value?: number): void;
    get(): any;
    static initialize(bot: Bot, ctx: Context): void;
}
export type LoadRate = [app: number, total: number];
declare class ProfileProvider extends DataService<ProfileProvider.Payload> {
    private config;
    cached: ProfileProvider.Payload;
    constructor(ctx: Context, config: ProfileProvider.Config);
    get(forced?: boolean): Promise<ProfileProvider.Payload>;
}
declare namespace ProfileProvider {
    interface Config {
        tickInterval?: number;
    }
    const Config: Schema<Config>;
    interface BotData extends Universal.Login {
        error?: string;
        paths?: string[];
        messageSent: number;
        messageReceived: number;
    }
    interface Payload {
        memory: LoadRate;
        cpu: LoadRate;
        bots: Dict<BotData>;
    }
}
export type Activity = Record<number, number>;
declare module 'koishi' {
    interface Channel {
        name: string;
        activity: Activity;
    }
}
declare module '@koishijs/console' {
    namespace Console {
        interface Services {
            envinfo: EnvInfoProvider;
            status: ProfileProvider;
        }
    }
}
export { EnvInfoProvider, ProfileProvider, };
export const name = "status";
export const inject: string[];
export interface Config extends ProfileProvider.Config, EnvInfoProvider.Config {
}
export const Config: Schema<Config>;
export function apply(ctx: Context, config: Config): void;
