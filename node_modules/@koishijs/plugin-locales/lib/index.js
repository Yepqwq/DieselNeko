var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// external/webui/plugins/locales/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  name: () => name
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_console = require("@koishijs/console");
var import_promises = require("fs/promises");
var import_path = require("path");
var import_js_yaml = require("js-yaml");
var import_meta = {};
var logger = new import_koishi.Logger("locales");
var _LocaleProvider = class _LocaleProvider extends import_console.DataService {
  constructor(ctx, config) {
    super(ctx, "locales", { authority: 4 });
    this.config = config;
    const update = ctx.debounce(() => this.refresh(), 0);
    ctx.on("internal/i18n", update);
    ctx.console.addEntry(process.env.KOISHI_BASE ? [
      process.env.KOISHI_BASE + "/dist/index.js",
      process.env.KOISHI_BASE + "/dist/style.css"
    ] : process.env.KOISHI_ENV === "browser" ? [
      // @ts-ignore
      import_meta.url.replace(/\/src\/[^/]+$/, "/client/index.ts")
    ] : {
      dev: (0, import_path.resolve)(__dirname, "../client/index.ts"),
      prod: (0, import_path.resolve)(__dirname, "../dist")
    });
    ctx.console.addListener("l10n", async (data) => {
      for (const locale in data) {
        ctx.i18n.define("$" + locale, data[locale]);
        const content = (0, import_js_yaml.dump)(data[locale]);
        await (0, import_promises.writeFile)((0, import_path.resolve)(ctx.baseDir, config.root[0], locale + ".yml"), content);
      }
    });
  }
  async get() {
    return this.ctx.i18n._data;
  }
};
__name(_LocaleProvider, "LocaleProvider");
var LocaleProvider = _LocaleProvider;
var name = "locales";
var Config = import_koishi.Schema.object({
  root: import_koishi.Schema.union([
    import_koishi.Schema.array(import_koishi.Schema.path({
      filters: ["directory"],
      allowCreate: true
    })),
    import_koishi.Schema.transform(String, (root) => [root])
  ]).default(["data/locales", "locales"]).description("存放本地化文件的根目录。")
});
async function apply(ctx, config) {
  for (const root of config.root.slice().reverse()) {
    const folder = (0, import_path.resolve)(ctx.baseDir, root);
    await (0, import_promises.mkdir)(folder, { recursive: true });
    const files = await (0, import_promises.readdir)(folder);
    for (const file of files) {
      if (!file.endsWith(".yml"))
        continue;
      logger.debug("loading locale %s", file);
      const content = await (0, import_promises.readFile)((0, import_path.resolve)(folder, file), "utf8");
      ctx.i18n.define("$" + file.split(".")[0], (0, import_js_yaml.load)(content));
    }
  }
  ctx.plugin(LocaleProvider, config);
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  name
});
//# sourceMappingURL=index.js.map
