import { Context, Dict, Schema, Universal } from 'koishi';
import { DataService } from '@koishijs/console';
declare module 'koishi' {
    interface Tables {
        'analytics.message': Analytics.Message;
        'analytics.command': Analytics.Command;
    }
}
declare module '@koishijs/console' {
    namespace Console {
        interface Services {
            analytics: Analytics;
        }
    }
}
export interface MessageStats {
    send: number;
    receive: number;
}
declare class Analytics extends DataService<Analytics.Payload> {
    private config;
    static inject: string[];
    lastUpdate: Date;
    updateHour: number;
    cachedDate: number;
    cachedData: Promise<Analytics.Payload>;
    private messages;
    private commands;
    constructor(ctx: Context, config?: Analytics.Config);
    private createIndex;
    private addAudit;
    private uploadAudit;
    upload(forced?: boolean): Promise<void>;
    private queryRecent;
    private getCommandRate;
    private getDauHistory;
    private getMessageByBot;
    private getMessageByDate;
    private getMessageByHour;
    download(): Promise<Analytics.Payload>;
    get(): Promise<Analytics.Payload>;
}
declare namespace Analytics {
    interface Index {
        id?: number;
        date: number;
        hour: number;
        selfId: string;
        platform: string;
    }
    interface Audit extends Index {
        count: number;
    }
    interface Message extends Index {
        type: string;
        count: number;
    }
    interface Command extends Index {
        name: string;
        userId: number;
        channelId: string;
        count: number;
    }
    interface Payload {
        userCount: number;
        userIncrement: number;
        guildCount: number;
        guildIncrement: number;
        dauHistory: number[];
        commandRate: Dict<number>;
        messageByBot: Dict<Dict<MessageStats & Universal.User>>;
        messageByDate: MessageStats[];
        messageByHour: MessageStats[];
    }
    interface Config {
        statsInternal?: number;
        recentDayCount?: number;
    }
    const Config: Schema<Config>;
}
export default Analytics;
