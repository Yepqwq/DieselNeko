import { Context, Schema, Service } from 'koishi';
declare module 'koishi' {
    interface Context {
        assets: Assets;
    }
}
declare abstract class Assets<T extends Assets.Config = Assets.Config> extends Service {
    protected ctx: Context;
    config: T;
    static filter: boolean;
    static types: string[];
    static inject: string[];
    protected types: readonly string[];
    abstract upload(url: string, file: string): Promise<string>;
    abstract stats(): Promise<Assets.Stats>;
    constructor(ctx: Context, config: T);
    transform(content: string): Promise<string>;
    protected analyze(url: string, name?: string): Promise<Assets.FileInfo>;
}
declare namespace Assets {
    interface Stats {
        assetCount?: number;
        assetSize?: number;
    }
    interface FileInfo {
        buffer: Buffer;
        hash: string;
        name: string;
        filename: string;
        type?: string;
    }
    interface Config {
        whitelist?: string[];
    }
    const Config: Schema<Config>;
}
export default Assets;
