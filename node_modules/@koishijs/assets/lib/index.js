var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_crypto = require("crypto");
var import_path = require("path");
var import_file_type = __toESM(require("file-type"));
var Assets = class _Assets extends import_koishi.Service {
  constructor(ctx, config) {
    super(ctx, "assets");
    this.ctx = ctx;
    this.config = config;
  }
  static {
    __name(this, "Assets");
  }
  static filter = false;
  static types = ["img", "audio", "video"];
  static inject = ["http"];
  types = _Assets.types;
  async transform(content) {
    return await import_koishi.h.transformAsync(content, Object.fromEntries(this.types.map((type) => {
      return [type, async (data) => {
        if (this.config.whitelist.some((prefix) => data.src.startsWith(prefix))) {
          return (0, import_koishi.h)(type, data);
        } else {
          return (0, import_koishi.h)(type, { src: await this.upload(data.src, data.file) });
        }
      }];
    })));
  }
  async analyze(url, name = "") {
    const file = await this.ctx.http.file(url);
    const buffer = Buffer.from(file.data);
    const hash = (0, import_crypto.createHash)("sha1").update(buffer).digest("hex");
    if (name) {
      name = (0, import_path.basename)(name);
      if (!name.startsWith(".")) {
        name = `-${name}`;
      }
    } else {
      const fileType = await import_file_type.default.fromBuffer(buffer);
      if (fileType) {
        name = `.${fileType.ext}`;
      }
    }
    return { buffer, hash, name, filename: `${hash}${name}`, type: file.type };
  }
};
((Assets2) => {
  Assets2.Config = import_koishi.Schema.object({
    whitelist: import_koishi.Schema.array(import_koishi.Schema.string().required().role("link")).description("不处理的白名单 URL 列表。")
  });
})(Assets || (Assets = {}));
var src_default = Assets;
//# sourceMappingURL=index.js.map
