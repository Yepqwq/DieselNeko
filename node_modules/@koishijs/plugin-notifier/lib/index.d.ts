import { Context, Dict, h, Schema, Service } from 'koishi';
import { Entry } from '@koishijs/plugin-console';
declare module 'koishi' {
    interface Context {
        notifier: NotifierService;
    }
}
declare module '@koishijs/console' {
    interface Events {
        'notifier/button'(id: string): void;
    }
}
export class Notifier {
    ctx: Context;
    options: Notifier.Config;
    dispose: () => void;
    private actionKeys;
    constructor(ctx: Context, options: h.Fragment | Notifier.Options);
    clearActions(): void;
    update(options: h.Fragment | Notifier.Options): void;
    toJSON(): Notifier.Data;
}
export namespace Notifier {
    type Type = 'primary' | 'success' | 'warning' | 'danger';
    interface Options<T = h.Fragment> {
        type?: Type;
        content?: T;
    }
    interface Config extends Required<Options> {
        content: h[];
    }
    interface Data extends Required<Options> {
        content: string;
        paths?: string[];
    }
}
declare class NotifierService extends Service {
    config: NotifierService.Config;
    static inject: {
        optional: string[];
    };
    store: Notifier[];
    actions: Dict<() => void>;
    entry?: Entry<NotifierService.Data>;
    constructor(ctx: Context, config: NotifierService.Config);
    message(options?: string | Notifier.Options<string>): void;
    create(options?: h.Fragment | Notifier.Options): Notifier;
}
declare namespace NotifierService {
    interface Data {
        notifiers: Notifier.Data[];
    }
    interface Config {
    }
    const Config: Schema<Config>;
}
export default NotifierService;
