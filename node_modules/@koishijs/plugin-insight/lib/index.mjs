var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/index.ts
import { camelize, capitalize, Context, Schema } from "koishi";
import { DataService } from "@koishijs/console";
import { resolve } from "path";
function format(name) {
  return capitalize(camelize(name));
}
__name(format, "format");
function getName(plugin) {
  if (!plugin)
    return "App";
  if (!plugin.name || plugin.name === "apply")
    return "Anonymous";
  return format(plugin.name);
}
__name(getName, "getName");
function getSourceId(child) {
  const { state } = child.parent;
  if (state.runtime.isForkable) {
    return state.uid;
  } else {
    return state.runtime.uid;
  }
}
__name(getSourceId, "getSourceId");
var Insight = class extends DataService {
  static {
    __name(this, "Insight");
  }
  constructor(ctx) {
    super(ctx, "insight");
    ctx.console.addEntry(process.env.KOISHI_BASE ? [
      process.env.KOISHI_BASE + "/dist/index.js",
      process.env.KOISHI_BASE + "/dist/style.css"
    ] : process.env.KOISHI_ENV === "browser" ? [
      // @ts-ignore
      import.meta.url.replace(/\/src\/[^/]+$/, "/client/index.ts")
    ] : {
      dev: resolve(__dirname, "../client/index.ts"),
      prod: resolve(__dirname, "../dist")
    });
    const update = ctx.debounce(() => this.refresh(), 0);
    ctx.on("internal/fork", update);
    ctx.on("internal/runtime", update);
    ctx.on("internal/service", update);
    ctx.on("internal/status", update);
  }
  async get() {
    const nodes = [];
    const edges = [];
    const services = {};
    for (const [key, { type }] of Object.entries(this.ctx.root[Context.internal])) {
      if (type !== "service")
        continue;
      const instance = this.ctx.get(key);
      if (!(instance instanceof Object))
        continue;
      const ctx = Reflect.getOwnPropertyDescriptor(instance, Context.current)?.value;
      if (ctx?.scope.uid) {
        (services[ctx.scope.uid] ||= []).push(key);
      }
    }
    for (const runtime of this.ctx.registry.values()) {
      let isActive = function(state) {
        return true;
      }, addNode = function(state) {
        const { uid, key, disposables, status } = state;
        const weight = disposables.length;
        const isGroup = name === "Group";
        const isRoot = uid === 0;
        const node = { uid, name, weight, status, isGroup, isRoot, services: services[uid] };
        if (key)
          node.name += ` [${key}]`;
        nodes.push(node);
      }, addEdge = function(type, source, target) {
        edges.push({ type, source, target });
      };
      __name(isActive, "isActive");
      __name(addNode, "addNode");
      __name(addEdge, "addEdge");
      const name = getName(runtime.plugin);
      const addDeps = /* @__PURE__ */ __name((state) => {
        for (const [name2, meta] of Object.entries(runtime.inject)) {
          if (!meta.required)
            continue;
          const instance = this.ctx.get(name2);
          if (!(instance instanceof Object))
            continue;
          const ctx = Reflect.getOwnPropertyDescriptor(instance, Context.current)?.value;
          const uid = ctx?.state.uid;
          if (!uid)
            continue;
          addEdge("dashed", uid, state.uid);
        }
      }, "addDeps");
      const isReusable = runtime.plugin?.["reusable"];
      if (!isReusable) {
        if (!isActive(runtime))
          continue;
        addNode(runtime);
        addDeps(runtime);
      }
      for (const fork of runtime.children) {
        if (runtime.isForkable) {
          if (!isActive(fork))
            continue;
          addNode(fork);
          addEdge("solid", getSourceId(fork), fork.uid);
          if (!isReusable) {
            addEdge("solid", fork.uid, runtime.uid);
          } else {
            addDeps(fork);
          }
        } else {
          nodes[nodes.length - 1].weight += fork.disposables.length;
          addEdge("solid", getSourceId(fork), runtime.uid);
        }
      }
    }
    return { nodes, edges };
  }
};
((Insight2) => {
  Insight2.Config = Schema.object({});
})(Insight || (Insight = {}));
var src_default = Insight;
export {
  src_default as default
};
//# sourceMappingURL=index.mjs.map
