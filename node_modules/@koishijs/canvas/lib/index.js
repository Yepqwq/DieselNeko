var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// external/puppeteer/external/canvas/src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var _CanvasService = class _CanvasService extends import_koishi.Service {
  constructor(ctx) {
    super(ctx, "canvas");
  }
  async render(width, height, callback) {
    const canvas = await this.createCanvas(width, height);
    try {
      await callback(canvas.getContext("2d"));
      const buffer = await canvas.toBuffer("image/png");
      return import_koishi.h.image(buffer, "image/png");
    } finally {
      await canvas.dispose();
    }
  }
};
__name(_CanvasService, "CanvasService");
var CanvasService = _CanvasService;
var src_default = CanvasService;
//# sourceMappingURL=index.js.map
