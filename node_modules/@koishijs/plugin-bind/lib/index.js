var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// koishi/plugins/common/bind/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  inject: () => inject,
  name: () => name
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");

// koishi/plugins/common/bind/src/locales/zh-CN.yml
var zh_CN_default = { "commands.bind": { description: "绑定到账号", options: { remove: "解除绑定" }, messages: { "generated-1": "Bind 指令可用于在多个平台间绑定用户数据。绑定过程中，原始平台的用户数据将完全保留，而目标平台的用户数据将被原始平台的数据所覆盖。\n请确认当前平台是你的目标平台，并在 5 分钟内使用你的账号在原始平台内向机器人发送以下文本：\n{0}\n绑定完成后，你可以随时使用「bind -r」来解除绑定状态。", "generated-2": "令牌核验成功！下面将进行第二步操作。\n请在 5 分钟内使用你的账号在目标平台内向机器人发送以下文本：\n{0}\n注意：当前平台是你的原始平台，这里的用户数据将覆盖目标平台的数据。", "self-1": "请前往原始平台输入。", "self-2": "请前往目标平台输入。", success: "账号绑定成功！", "remove-success": "账号解绑成功！", "remove-original": "无法解除绑定：这是你的原始账号。" } } };

// koishi/plugins/common/bind/src/locales/en-US.yml
var en_US_default = { "commands.bind": { description: "Bind to account", options: { remove: "Unbind" }, messages: { "generated-1": `The Bind command can be used to bind user data across multiple platforms. During the bind process, the original platform's user data is fully preserved, while the target platform's user data is overwritten with the original platform's data.
Please make sure that the current platform is your target platform and send the following text to the bot within the original platform using your account within 5 minutes:
{0}
Once the binding is complete, you can always use "bind -r" to unbind the status.`, "generated-2": "Token verification successful! The second step will be performed next.\nPlease use your account to send the following text to the bot on the target platform within 5 minutes:\n{0}\nNote: The current platform is your original platform, the user data here will overwrite the data from the target platform.", success: "Account binding has been successful!", "remove-success": "Your account has been successfully unbundled!", "remove-original": "Cannot disconnect: This is your original account." } } };

// koishi/plugins/common/bind/src/index.ts
var name = "bind";
var inject = ["database"];
var Config = import_koishi.Schema.object({
  generateToken: import_koishi.Schema.function().hidden()
});
function apply(ctx, config = {}) {
  ctx.i18n.define("zh-CN", zh_CN_default);
  ctx.i18n.define("en-US", en_US_default);
  const tokens = /* @__PURE__ */ Object.create(null);
  const { tokenPrefix: prefix = "koishi/" } = config;
  const { generateToken = /* @__PURE__ */ __name(() => `${prefix}` + import_koishi.Random.id(6, 10), "generateToken") } = config;
  function generate(session, phase) {
    const token = generateToken();
    tokens[token] = [session.platform, session.userId, phase];
    ctx.setTimeout(() => delete tokens[token], 5 * import_koishi.Time.minute);
    return token;
  }
  __name(generate, "generate");
  async function bind(aid, platform, pid) {
    await ctx.database.set("binding", { platform, pid }, { aid });
  }
  __name(bind, "bind");
  ctx.command("bind", { authority: 0 }).userFields(["id"]).option("remove", "-r").action(async ({ session, options }) => {
    if (options.remove) {
      const { platform, userId: pid } = session;
      const bindings = await ctx.database.get("binding", { aid: session.user.id });
      const binding = bindings.find((item) => item.platform === platform && item.pid === pid);
      if (binding.aid !== binding.bid) {
        await bind(binding.bid, platform, pid);
        return session.text(".remove-success");
      } else if (bindings.filter((item) => item.aid === item.bid).length === 1) {
        return session.text(".remove-original");
      } else {
        const authority = await session.resolve(ctx.root.config.autoAuthorize);
        const user = await ctx.database.create("user", { authority });
        await bind(user.id, platform, pid);
        return session.text(".remove-success");
      }
    }
    const token = generate(session, +!session.isDirect);
    return session.text(".generated-1", [token]);
  });
  ctx.middleware(async (session, next) => {
    const token = session.stripped.content;
    const data = tokens[token];
    if (!data)
      return next();
    if (data[0] === session.platform && data[1] === session.userId) {
      return session.text("commands.bind.messages.self-" + (data[2] < 0 ? "2" : "1"));
    }
    delete tokens[token];
    if (data[2] < 0) {
      const [binding] = await ctx.database.get("binding", { platform: data[0], pid: data[1] }, ["aid"]);
      await bind(binding.aid, session.platform, session.userId);
      return session.text("commands.bind.messages.success");
    } else {
      const user = await ctx.database.getUser(session.platform, session.userId, ["id", "authority"]);
      if (!user.authority)
        return session.text("internal.low-authority");
      if (data[2]) {
        const token2 = generate(session, -1);
        return session.text("commands.bind.messages.generated-2", [token2]);
      } else {
        await bind(user.id, data[0], data[1]);
        return session.text("commands.bind.messages.success");
      }
    }
  }, true);
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  inject,
  name
});
//# sourceMappingURL=index.js.map
