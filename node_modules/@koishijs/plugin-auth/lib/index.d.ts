import { Binding, Context, Schema, Service, User } from 'koishi';
import { Client } from '@koishijs/console';
declare module 'koishi' {
    interface Context {
        auth: AuthService;
    }
    interface User {
        password: string;
        config: any;
    }
    interface Tables {
        token: LoginToken;
    }
}
declare module '@koishijs/console' {
    interface Client {
        auth?: Auth;
    }
    namespace Console {
        interface Services {
            user: DataService<AuthData>;
        }
    }
    interface Events {
        'login/platform'(this: Client, platform: string, pid: string): Promise<UserLogin>;
        'login/password'(this: Client, name: string, password: string): void;
        'login/token'(this: Client, id: number, token: string): void;
        'user/delete-token'(this: Client, inc: number): void;
        'user/unbind'(this: Client, platform: string, pid: string): void;
        'user/update'(this: Client, data: UserUpdate): void;
        'user/logout'(this: Client): void;
    }
}
export interface LoginToken {
    inc: number;
    id: number;
    type: LoginType;
    token: string;
    expiredAt: number;
    createdAt: Date;
    lastUsedAt: Date;
    userAgent: string;
    address: string;
}
export type Auth = Pick<LoginToken, 'token' | 'expiredAt'> & Pick<User, 'id' | 'name' | 'authority' | 'config'>;
interface AuthData extends Auth {
    tokens: Omit<LoginToken, 'token' | 'id'>[];
    bindings: Omit<Binding, 'aid'>[];
}
type LoginType = 'platform' | 'password' | 'token';
export declare function randomId(length?: number): string;
export interface UserLogin extends Pick<User, 'id' | 'name'> {
    token: string;
    expiredAt: number;
}
export type UserUpdate = Partial<Pick<User, 'name' | 'password' | 'config'>>;
declare class AuthService extends Service {
    private config;
    static inject: string[];
    constructor(ctx: Context, config: AuthService.Config);
    start(): Promise<void>;
    setAuth(client: Client, auth?: Auth, passive?: boolean): Promise<void>;
    createToken(client: Client, type: LoginType, user: Pick<User, 'id' | 'name' | 'authority' | 'config'>): Promise<void>;
    initLogin(): void;
}
declare namespace AuthService {
    const filter = false;
    interface Admin {
        enabled?: boolean;
        username?: string;
        password?: string;
    }
    const Admin: Schema<Admin>;
    interface Config {
        admin?: Admin;
        authTokenExpire?: number;
        loginTokenExpire?: number;
    }
    const Config: Schema<Config>;
}
export default AuthService;
