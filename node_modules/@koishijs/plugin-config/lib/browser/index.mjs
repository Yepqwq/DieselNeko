var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/browser/index.ts
import { Schema as Schema2 } from "koishi";

// src/shared/packages.ts
import { Context, Logger } from "koishi";
import { DataService } from "@koishijs/console";
var logger = new Logger("config");
var PackageProvider = class extends DataService {
  constructor(ctx) {
    super(ctx, "packages", { authority: 4 });
    this.ctx = ctx;
    this.debouncedRefresh = ctx.debounce(() => this.refresh(false), 0);
    ctx.on("internal/runtime", (scope) => this.update(scope.runtime.plugin));
    ctx.on("internal/fork", (scope) => this.update(scope.runtime.plugin));
    ctx.on("internal/status", (scope) => this.update(scope.runtime.plugin));
    ctx.on("hmr/reload", (reloads) => {
      for (const [plugin] of reloads) {
        this.update(plugin);
      }
    });
    ctx.console.addListener("config/request-runtime", async (name2) => {
      name2 = name2.replace(/(koishi-|^@koishijs\/)plugin-/, "");
      this.cache[name2] = await this.parseExports(name2);
      this.refresh(false);
    }, { authority: 4 });
  }
  static {
    __name(this, "PackageProvider");
  }
  cache = {};
  debouncedRefresh;
  async update(plugin) {
    const name2 = this.ctx.loader.keyFor(plugin);
    if (!this.cache[name2])
      return;
    this.cache[name2] = await this.parseExports(name2);
    this.debouncedRefresh();
  }
  parseRuntime(state, result) {
    result.id = state.runtime.uid;
    result.forkable = state.runtime.isForkable;
    result.forks = Object.fromEntries(state.children.filter((fork) => fork.key).map((fork) => [fork.key, { status: fork.status }]));
  }
  async get(forced = false) {
    const objects = (await this.collect(forced)).slice();
    for (const object of objects) {
      object.name = object.package?.name || "";
      if (!this.cache[object.shortname])
        continue;
      object.runtime = this.cache[object.shortname];
    }
    objects.unshift({
      name: "",
      runtime: {
        schema: Context.Config
      },
      package: { name: "" }
    });
    return Object.fromEntries(objects.map((data) => [data.name, data]));
  }
  async parseExports(name2) {
    try {
      const exports = await this.ctx.loader.resolve(name2);
      const result = {};
      result.schema = exports?.Config || exports?.schema;
      result.usage = exports?.usage;
      result.filter = exports?.filter;
      const inject2 = exports?.using || exports?.inject || [];
      if (Array.isArray(inject2)) {
        result.required = inject2;
        result.optional = [];
      } else {
        result.required = inject2.required || [];
        result.optional = inject2.optional || [];
      }
      JSON.stringify(result);
      const runtime = this.ctx.registry.get(exports);
      if (runtime)
        this.parseRuntime(runtime, result);
      return result;
    } catch (error) {
      logger.warn("failed to load %c", name2);
      logger.warn(error);
      return { failed: true };
    }
  }
};

// src/shared/services.ts
import { DataService as DataService2 } from "@koishijs/console";
import { Context as Context2 } from "koishi";
var ServiceProvider = class extends DataService2 {
  static {
    __name(this, "ServiceProvider");
  }
  constructor(ctx) {
    super(ctx, "services");
    ctx.on("internal/service", () => this.refresh());
  }
  async get() {
    const services = {};
    const attach = /* @__PURE__ */ __name((internal) => {
      if (!internal)
        return;
      attach(Object.getPrototypeOf(internal));
      for (const [key, { type }] of Object.entries(internal)) {
        if (type !== "service")
          continue;
        const instance = this.ctx.get(key);
        if (!(instance instanceof Object))
          continue;
        const ctx = Reflect.getOwnPropertyDescriptor(instance, Context2.current)?.value;
        if (!ctx)
          continue;
        const name2 = key.replace(/^__/, "").replace(/__$/, "");
        services[name2] = ctx.scope.uid;
      }
    }, "attach");
    attach(this.ctx.root[Context2.internal]);
    return services;
  }
};

// src/shared/writer.ts
import { DataService as DataService3 } from "@koishijs/console";
import { Logger as Logger2, remove } from "koishi";
import { Loader } from "@koishijs/loader";
var logger2 = new Logger2("loader");
function insertKey(object, temp, rest) {
  for (const key of rest) {
    temp[key] = object[key];
    delete object[key];
  }
  Object.assign(object, temp);
}
__name(insertKey, "insertKey");
function rename(object, old, neo, value) {
  const keys = Object.keys(object);
  const index = keys.findIndex((key) => key === old || key === "~" + old);
  const rest = index < 0 ? [] : keys.slice(index + 1);
  const temp = { [neo]: value };
  delete object[old];
  delete object["~" + old];
  insertKey(object, temp, rest);
}
__name(rename, "rename");
function dropKey(plugins, name2) {
  if (!(name2 in plugins)) {
    name2 = "~" + name2;
  }
  const value = plugins[name2];
  delete plugins[name2];
  return { [name2]: value };
}
__name(dropKey, "dropKey");
var ConfigWriter = class extends DataService3 {
  static {
    __name(this, "ConfigWriter");
  }
  loader;
  constructor(ctx) {
    super(ctx, "config", { authority: 4 });
    this.loader = ctx.loader;
    ctx.console.addListener("manager/app-reload", (config) => {
      return this.reloadApp(config);
    }, { authority: 4 });
    for (const key of ["teleport", "reload", "unload", "remove", "meta"]) {
      ctx.console.addListener(`manager/${key}`, async (...args) => {
        try {
          await this[key].apply(this, args);
        } catch (error) {
          logger2.error(error);
          throw new Error("failed");
        }
      }, { authority: 4 });
    }
    ctx.on("config", () => this.refresh());
  }
  getGroup(plugins, ctx) {
    const result = { ...plugins };
    for (const key in plugins) {
      if (key.startsWith("$"))
        continue;
      const value = plugins[key];
      const name2 = key.split(":", 1)[0].replace(/^~/, "");
      if (!this.loader.isTruthyLike(value?.$if)) {
        delete result[key];
        continue;
      }
      const fork = ctx.scope[Loader.kRecord][key];
      if (!fork)
        continue;
      if (name2 === "group") {
        result[key] = this.getGroup(value, fork.ctx);
      }
    }
    return result;
  }
  async get() {
    const result = { ...this.loader.config };
    result.plugins = this.getGroup(result.plugins, this.loader.entry);
    return result;
  }
  async reloadApp(config) {
    delete config.$paths;
    const plugins = this.loader.config.plugins;
    this.loader.config = config;
    this.loader.config.plugins = plugins;
    await this.loader.writeConfig();
    this.loader.fullReload();
  }
  resolveFork(ident) {
    if (!ident)
      return this.loader.entry.scope;
    for (const main of this.ctx.registry.values()) {
      for (const fork of main.children) {
        if (fork.key === ident)
          return fork;
      }
    }
  }
  resolveConfig(ident, config = this.loader.config.plugins) {
    for (const key in config) {
      const [name2] = key.split(":", 1);
      if (key.slice(name2.length + 1) === ident)
        return [config, key];
      if (name2 === "group" || name2 === "~group") {
        try {
          return this.resolveConfig(ident, config[key]);
        } catch {
        }
      }
    }
    throw new Error("plugin not found");
  }
  async meta(ident, config) {
    const [parent, key] = this.resolveConfig(ident);
    const target = parent[key];
    for (const key2 of Object.keys(config)) {
      delete target[key2];
      if (config[key2] === null) {
        delete config[key2];
      }
    }
    insertKey(target, config, Object.keys(target));
    await this.loader.writeConfig(true);
  }
  async reload(parent, key, config) {
    const scope = this.resolveFork(parent);
    await this.loader.reload(scope.ctx, key, config);
    rename(scope.config, key, key, config);
    await this.loader.writeConfig();
  }
  async unload(parent, key, config = {}, index) {
    const scope = this.resolveFork(parent);
    this.loader.unload(scope.ctx, key);
    if (index) {
      const rest = Object.keys(scope.config).slice(index);
      insertKey(scope.config, { ["~" + key]: config }, rest);
    } else {
      rename(scope.config, key, "~" + key, config);
    }
    await this.loader.writeConfig();
  }
  async remove(parent, key) {
    const scope = this.resolveFork(parent);
    this.loader.unload(scope.ctx, key);
    delete scope.config[key];
    delete scope.config["~" + key];
    await this.loader.writeConfig();
  }
  async teleport(source, key, target, index) {
    const parentS = this.resolveFork(source);
    const parentT = this.resolveFork(target);
    const fork = parentS?.[Loader.kRecord]?.[key];
    if (fork && parentS !== parentT) {
      delete parentS[Loader.kRecord][key];
      parentT[Loader.kRecord][key] = fork;
      remove(parentS.disposables, fork.dispose);
      parentT.disposables.push(fork.dispose);
      fork.parent = parentT.ctx;
      Object.setPrototypeOf(fork.ctx, parentT.ctx);
      fork.ctx.emit("internal/fork", fork);
      if (fork.runtime.using.some((name2) => parentS[name2] !== parentT[name2])) {
        fork.restart();
      }
    }
    const temp = dropKey(parentS.config, key);
    const rest = Object.keys(parentT.config).slice(index);
    insertKey(parentT.config, temp, rest);
    await this.loader.writeConfig();
  }
};

// src/browser/packages.ts
var PackageProvider2 = class extends PackageProvider {
  static {
    __name(this, "PackageProvider");
  }
  async collect(forced) {
    return this.ctx.loader.market.objects;
  }
};

// src/browser/index.ts
var name = "config";
var inject = ["console", "loader"];
var Config = Schema2.object({});
function apply(ctx, config) {
  ctx.plugin(PackageProvider2);
  ctx.plugin(ConfigWriter);
  ctx.plugin(ServiceProvider);
  ctx.console.addEntry(process.env.KOISHI_BASE ? [
    process.env.KOISHI_BASE + "/dist/index.js",
    process.env.KOISHI_BASE + "/dist/style.css"
  ] : [
    // @ts-ignore
    import.meta.url.replace(/\/src\/[^/]+\/[^/]+$/, "/client/index.ts")
  ]);
}
__name(apply, "apply");
export {
  Config,
  ConfigWriter,
  PackageProvider,
  ServiceProvider,
  apply,
  inject,
  name
};
//# sourceMappingURL=index.mjs.map
