import { Awaitable, Context, Service } from 'koishi';
declare module 'koishi' {
    interface Context {
        cache: Cache;
    }
}
export interface Tables {
    default: any;
}
declare abstract class Cache extends Service {
    constructor(ctx: Context);
    abstract clear<K extends keyof Tables>(table: K): Promise<void>;
    abstract get<K extends keyof Tables>(table: K, key: string): Promise<Tables[K]>;
    abstract set<K extends keyof Tables>(table: K, key: string, value: Tables[K], maxAge?: number): Promise<void>;
    abstract delete<K extends keyof Tables>(table: K, key: string): Promise<void>;
    abstract keys<K extends keyof Tables>(table: K): AsyncIterable<string>;
    abstract values<K extends keyof Tables>(table: K): AsyncIterable<Tables[K]>;
    abstract entries<K extends keyof Tables>(table: K): AsyncIterable<[string, Tables[K]]>;
    forEach<K extends keyof Tables>(table: K, callback: (value: Tables[K], key: string) => Awaitable<void>): Promise<void>;
}
export default Cache;
