var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  name: () => name
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");

// src/locales/zh-CN.yml
var zh_CN_default = { commands: { inspect: { description: "查看用户、频道或消息的详细信息", usage: "inspect @user\ninspect #channel\ninspect", messages: { invalid: "参数无法解析。", user: "用户 ID：{id}", channel: "频道 ID：{id}", message: "平台名：{platform}\n消息 ID：{messageId}\n频道 ID：{channelId}\n群组 ID：{guildId}\n用户 ID：{userId}\n自身 ID：{selfId}" } } } };

// src/index.ts
var name = "inspect";
var Config = import_koishi.Schema.object({});
function apply(ctx) {
  ctx.i18n.define("zh-CN", zh_CN_default);
  ctx.command("inspect").action(({ session }, target) => {
    if (session.quote) {
      return session.text(".message", {
        platform: session.platform,
        guildId: session.guildId,
        selfId: session.selfId,
        userId: session.quote.user?.id,
        channelId: session.quote.channel?.id
      });
    }
    if (target) {
      const { type, attrs } = import_koishi.h.parse(target)[0];
      if (type === "at") {
        return session.text(".user", attrs);
      } else if (type === "sharp") {
        return session.text(".channel", attrs);
      } else {
        return session.text(".invalid");
      }
    }
    return session.text(".message", session);
  });
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  name
});
//# sourceMappingURL=index.js.map
