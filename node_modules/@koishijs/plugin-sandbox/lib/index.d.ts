import { Context, Dict, Schema, User } from 'koishi';
import { DataService } from '@koishijs/console';
declare module 'koishi' {
    interface Events {
        'sandbox/response'(nonce: string, data: any): void;
    }
}
declare module '@koishijs/console' {
    namespace Console {
        interface Services {
            sandbox: SandboxService;
        }
    }
    interface Events {
        'sandbox/response'(this: Client, nonce: string, data?: any): void;
        'sandbox/send-message'(this: Client, platform: string, user: string, channel: string, content: string, quote?: Message): void;
        'sandbox/delete-message'(this: Client, platform: string, user: string, channel: string, messageId: string): void;
        'sandbox/get-user'(this: Client, platform: string, pid: string): Promise<User>;
        'sandbox/set-user'(this: Client, platform: string, pid: string, data: Partial<User>): Promise<void>;
    }
}
export interface Message {
    id: string;
    user: string;
    channel: string;
    content: string;
    platform: string;
    quote?: Message;
}
export declare const filter = false;
export declare const name = "sandbox";
export declare const inject: string[];
export interface Config {
}
export declare const Config: Schema<Config>;
declare class SandboxService extends DataService<Dict<number>> {
    static inject: string[];
    constructor(ctx: Context);
    get(): Promise<{
        [k: string]: number;
    }>;
}
export declare function apply(ctx: Context, config: Config): void;
export {};
