import { Command, Computed, Context, Dict, Schema, User } from 'koishi';
declare module 'koishi' {
    namespace Command {
        interface Config {
            /** usage identifier */
            usageName?: string;
            /** max usage per day */
            maxUsage?: Computed<number>;
            /** min interval */
            minInterval?: Computed<number>;
            /** @deprecated use filter instead */
            bypassAuthority?: Computed<number>;
        }
    }
    interface User {
        usage: Dict<number>;
        timers: Dict<number>;
    }
    namespace Argv {
        interface OptionConfig {
            notUsage?: boolean;
        }
    }
}
export interface Config {
}
export declare const name = "rate-limit";
export declare const inject: string[];
export declare const Config: Schema<Config>;
export declare function apply(ctx: Context): void;
export declare function getUsageName(command: Command): string;
export declare function getUsage(name: string, user: Pick<User, 'usage'>): number;
export declare function checkUsage(name: string, user: Pick<User, 'usage'>, maxUsage?: number): boolean;
export declare function checkTimer(name: string, { timers }: Pick<User, 'timers'>, offset?: number): boolean;
