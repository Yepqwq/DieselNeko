var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var authority in all)
    __defProp(target, authority, { get: all[authority], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var koishi_1 = require("koishi");
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  inject: () => inject,
  usage: () => usage,
  authority: () => authority
});
module.exports = __toCommonJS(src_exports);

var inject = ["database"];
var Config = koishi_1.Schema.intersect([
  koishi_1.Schema.object({
    Command_Name: koishi_1.Schema.string().description("注册的指令名称").default('changeauth'),
    MAX_authority_Limit: koishi_1.Schema.number().default(5).description("允许修改为的最大权限值"),
  }).description('指令设置'),
]);
var usage = `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>插件使用说明</title>
</head>
<body>
    <h1>插件使用说明</h1>
    <p>开启插件后，使用<code>changeauth 5</code>即可将自己的权限提升至5。</p>
    <p>注： 根据<a href="https://koishi.chat/zh-CN/manual/usage/customize.html#%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86" target="_blank">Koishi权限管理文档</a>，建议设置的最高权限不大于<code>5</code>。</p>
    <ul>
        <li>温馨提示，请在使用时注意：</li>
        <li>强烈建议为本插件配置 <strong>过滤器</strong>为 <strong>用户ID 等于 你的ID</strong> ，以防止其他无关用户使用本插件，避免潜在隐患。</li>
        <li>本插件仅适用于提升自身权限，若需要为他人提升权限，<a href="https://koishi.chat/zh-CN/plugins/common/admin.html#%E6%8C%87%E4%BB%A4-authorize" target="_blank">请参考 这里</a>。</li>
    </ul>

[本插件参考自callme插件](/market?keyword=callme)
    
</body>
</html>

`;

function apply(ctx, config) {
  var zh_CN_default = { 
    commands: { 
      [config.Command_Name]: { 
        description: "定义自己的权限", 
        messages: { 
          current: "authority{0}！", 
          unnamed: "暂无authority", 
          unchanged: "authority未发生变化。", 
          empty: "authority不能为空。", 
          invalid: "权限值必须为纯数字。", 
          toolarge: "您输入的权限值过高，最大值为：{0}。", 
          toosmall: "您输入的权限值过低，最小值为：1。",           
          updated: "您的权限已改为：{0}", 
          failed: "修改authority失败。" 
        } 
      } 
    } 
  };
  
  ctx.i18n.define("zh-CN", zh_CN_default);
  ctx.command(`${config.Command_Name} [authority:text]`, `Use ${config.Command_Name} to customize your own permission`)
    .userFields(["id", "authority"])
    .shortcut("提权", { prefix: true, fuzzy: true })
    .action(async ({ session }, authority) => {
      const { user } = session;
      if (!authority) {
        return session.text(".empty");
      }
      authority = koishi_1.h.transform(authority, {
        text: true,
        default: false
      }).trim();
      
      // 验证是否为纯数字
      if (!/^\d+$/.test(authority)) {
        return session.text(".invalid");
      }
      
      // 转换为整数并验证范围
      const authorityValue = parseInt(authority);
      if (authorityValue < 1) {
        return session.text(".toosmall");
      }
      if (authorityValue > config.MAX_authority_Limit) {
        return session.text(".toolarge", [config.MAX_authority_Limit]);
      }
  
      if (authorityValue === user.authority) {
        return session.text(".unchanged");
      }
  
      const result = ctx.bail("common/changeauth", authorityValue, session);
      if (result) return result;
  
      try {
        user.authority = authorityValue;
        await user.$update();
        return session.text(".updated", [authorityValue]);
      } catch (error) {
        ctx.logger("common").warn(error);
        return session.text(".failed");
      }
    });
}
__name(apply, "apply");

0 && (module.exports = {
  Config,
  apply,
  inject,
  usage,
  authority
});
