import { Context, Schema } from 'koishi';
import Cache from '@koishijs/cache';
declare module 'koishi' {
    interface Tables {
        cache: CacheEntry;
    }
}
interface CacheEntry {
    table: string;
    key: string;
    value: string;
    expire: Date;
}
declare class DatabaseCache extends Cache {
    private config;
    static using: readonly ["database"];
    constructor(ctx: Context, config: DatabaseCache.Config);
    private encode;
    private decode;
    clear(table: string): Promise<void>;
    get(table: string, key: string): Promise<any>;
    set(table: string, key: string, value: any, maxAge?: number): Promise<void>;
    delete(table: string, key: string): Promise<void>;
    keys(table: string): AsyncGenerator<string, void, undefined>;
    values(table: string): AsyncGenerator<any, void, undefined>;
    entries(table: string): AsyncGenerator<any, void, undefined>;
}
declare namespace DatabaseCache {
    interface Config {
        refreshInterval?: number;
    }
    const Config: Schema<Config>;
}
export default DatabaseCache;
