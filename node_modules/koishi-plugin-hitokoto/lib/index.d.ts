import { Service, Context, Schema } from 'koishi';
import { SentencesParams } from 'koishi-plugin-hitokoto-sentences';

declare module 'koishi' {
    interface Context {
        hitokoto: HitokotoApi;
    }
}
declare class HitokotoApi extends Service {
    private _apiUrl;
    config: Config;
    constructor(ctx: Context, config: Config);
    getHitokoto(params: SentencesParams): Promise<HitokotoRet>;
    buildSearchParams(params: SentencesParams): URLSearchParams;
    get types(): {
        a: string;
        b: string;
        c: string;
        d: string;
        e: string;
        f: string;
        g: string;
        h: string;
        i: string;
        j: string;
        k: string;
        l: string;
    };
}
interface HitokotoRet {
    id: number;
    hitokoto: string;
    type: string;
    from: string;
    from_who: string | null;
    creator: string;
    creator_uid: number;
    reviewer: number;
    uuid: string;
    commit_from: string;
    created_at: string;
    length: number;
}

interface Config {
    sentences?: boolean;
    /**
     * @default "https://v1.hitokoto.cn"
     */
    apiUrl?: string;
    minLength?: number;
    maxLength?: number;
    /**
     * only reply restricted types of hitokoto sentences
     *
     * @see https://developer.hitokoto.cn/sentence/#%E5%8F%A5%E5%AD%90%E7%B1%BB%E5%9E%8B-%E5%8F%82%E6%95%B0
     */
    defaultTypes?: string[];
}
declare const Config: Schema<Config>;

declare const inject: {
    optional: string[];
};
declare const name = "hitokoto";

declare function apply(ctx: Context, config?: Config): Promise<void>;

export { Config, HitokotoApi, apply, inject, name };
