"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const puppeteer_core_1 = __importDefault(require("puppeteer-core"));
const puppeteer_finder_1 = __importDefault(require("puppeteer-finder"));
const koishi_1 = require("koishi");
const svg_1 = require("./svg");
const canvas_1 = __importDefault(require("./canvas"));
const path_1 = require("path");
const url_1 = require("url");
__exportStar(require("./svg"), exports);
class Puppeteer extends koishi_1.Service {
    config;
    static [koishi_1.Service.provide] = 'puppeteer';
    static inject = ['http'];
    browser;
    executable;
    constructor(ctx, config) {
        super(ctx, 'puppeteer');
        this.config = config;
        ctx.plugin(canvas_1.default);
    }
    async start() {
        let { executablePath } = this.config;
        if (!executablePath) {
            this.logger.info('chrome executable found at %c', executablePath = (0, puppeteer_finder_1.default)());
        }
        const { proxyAgent } = this.ctx.http.config;
        const args = this.config.args || [];
        if (proxyAgent && !args.some(arg => arg.startsWith('--proxy-server'))) {
            args.push(`--proxy-server=${proxyAgent}`);
        }
        this.browser = await puppeteer_core_1.default.launch({
            ...this.config,
            executablePath,
            args,
        });
        this.logger.debug('browser launched');
        const transformStyle = (source, base = {}) => {
            return Object.entries({ ...base, ...source }).map(([key, value]) => {
                return `${(0, koishi_1.hyphenate)(key)}: ${Array.isArray(value) ? value.join(', ') : value}`;
            }).join('; ');
        };
        this.ctx.component('html', async (attrs, children, session) => {
            const head = [];
            const transform = (element) => {
                if (element.type === 'head') {
                    head.push(...element.children);
                    return;
                }
                const attrs = { ...element.attrs };
                if (typeof attrs.style === 'object') {
                    attrs.style = transformStyle(attrs.style);
                }
                return (0, koishi_1.h)(element.type, attrs, element.children.map(transform).filter(Boolean));
            };
            const page = await this.page();
            try {
                if (attrs.src) {
                    await page.goto(attrs.src);
                }
                else {
                    await page.goto((0, url_1.pathToFileURL)((0, path_1.resolve)(__dirname, '../index.html')).href);
                    const bodyStyle = typeof attrs.style === 'object'
                        ? transformStyle({ display: 'inline-block' }, attrs.style)
                        : ['display: inline-block', attrs.style].filter(Boolean).join('; ');
                    const content = children.map(transform).filter(Boolean).join('');
                    const lang = attrs.lang ? ` lang="${attrs.lang}"` : '';
                    await page.setContent(`<html${lang}>
            <head>${head.join('')}</head>
            <body style="${bodyStyle}">${content}</body>
          </html>`);
                }
                await page.waitForNetworkIdle({
                    timeout: attrs.timeout ? +attrs.timeout : undefined,
                });
                const body = await page.$(attrs.selector || 'body');
                const clip = await body.boundingBox();
                const screenshot = await page.screenshot({ clip });
                return koishi_1.h.image(screenshot, 'image/png');
            }
            finally {
                await page?.close();
            }
        });
    }
    async stop() {
        await this.browser?.close();
    }
    page = () => this.browser.newPage();
    svg = (options) => new svg_1.SVG(options);
    render = async (content, callback) => {
        const page = await this.page();
        await page.goto((0, url_1.pathToFileURL)((0, path_1.resolve)(__dirname, '../index.html')).href);
        if (content)
            await page.setContent(content);
        callback ||= async (_, next) => page.$('body').then(next);
        const output = await callback(page, async (handle) => {
            const clip = handle ? await handle.boundingBox() : null;
            const buffer = await page.screenshot({ clip });
            return koishi_1.h.image(buffer, 'image/png').toString();
        });
        page.close();
        return output;
    };
}
(function (Puppeteer) {
    Puppeteer.filter = false;
    Puppeteer.Config = koishi_1.Schema.intersect([
        koishi_1.Schema.object({
            executablePath: koishi_1.Schema.string().description('可执行文件的路径。缺省时将自动从系统中寻找。'),
            headless: koishi_1.Schema.boolean().description('是否开启[无头模式](https://developer.chrome.com/blog/headless-chrome/)。').default(true),
            args: koishi_1.Schema.array(String)
                .description('额外的浏览器参数。Chromium 参数可以参考[这个页面](https://peter.sh/experiments/chromium-command-line-switches/)。')
                .default(process.getuid?.() === 0 ? ['--no-sandbox'] : []),
        }).description('启动设置'),
        koishi_1.Schema.object({
            defaultViewport: koishi_1.Schema.object({
                width: koishi_1.Schema.natural().description('默认的视图宽度。').default(1280),
                height: koishi_1.Schema.natural().description('默认的视图高度。').default(768),
                deviceScaleFactor: koishi_1.Schema.number().min(0).description('默认的设备缩放比率。').default(2),
            }),
            ignoreHTTPSErrors: koishi_1.Schema.boolean().description('在导航时忽略 HTTPS 错误。').default(false),
        }).description('浏览器设置'),
    ]);
})(Puppeteer || (Puppeteer = {}));
exports.default = Puppeteer;
//# sourceMappingURL=index.js.map