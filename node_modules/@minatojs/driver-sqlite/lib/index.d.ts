import { Builder } from '@minatojs/sql-utils';
import { Dict } from 'cosmokit';
import { Driver, Model, RegExpLike, Type, Eval, Selection, z } from 'minato';
import init from '@minatojs/sql.js';
export class SQLiteBuilder extends Builder {
    protected driver: Driver;
    protected escapeMap: {
        "'": string;
    };
    constructor(driver: Driver, tables?: Dict<Model>);
    escapePrimitive(value: any, type?: Type): string;
    protected createElementQuery(key: string, value: any): string;
    protected createRegExpQuery(key: string, value: string | RegExpLike): string;
    protected jsonLength(value: string): string;
    protected jsonContains(obj: string, value: string): string;
    protected encode(value: string, encoded: boolean, pure?: boolean, type?: Type): string;
    protected createAggr(expr: any, aggr: (value: string) => string, nonaggr?: (value: string) => string): string;
    protected groupArray(value: string): string;
    protected transformJsonField(obj: string, path: string): string;
}
export interface SQLiteFieldInfo {
    cid: number;
    name: string;
    type: string;
    notnull: number;
    dflt_value: string;
    pk: boolean;
}
export class SQLiteDriver extends Driver<SQLiteDriver.Config> {
    static name: string;
    path: string;
    db: init.Database;
    sql: SQLiteBuilder;
    beforeUnload?: () => void;
    private _transactionTask?;
    /** synchronize table schema */
    prepare(table: string, dropKeys?: string[]): Promise<void>;
    start(): Promise<void>;
    _joinKeys(keys?: string[]): string;
    stop(): Promise<void>;
    _exec(sql: string, params: any, callback: (stmt: init.Statement) => any): any;
    _all(sql: string, params?: any, config?: {
        useBigInt: boolean;
    }): any;
    _get(sql: string, params?: any, config?: {
        useBigInt: boolean;
    }): any;
    _export(): Promise<void>;
    _run(sql: string, params?: any, callback?: () => any): any;
    drop(table: string): Promise<void>;
    dropAll(): Promise<void>;
    stats(): Promise<Driver.Stats>;
    remove(sel: Selection.Mutable): Promise<{
        matched?: undefined;
        removed?: undefined;
    } | {
        matched: any;
        removed: any;
    }>;
    get(sel: Selection.Immutable): Promise<any[]>;
    eval(sel: Selection.Immutable, expr: Eval.Expr): Promise<any>;
    _update(sel: Selection.Mutable, indexFields: string[], updateFields: string[], update: {}, data: {}): void;
    set(sel: Selection.Mutable, update: {}): Promise<Driver.WriteResult>;
    _create(table: string, data: {}): any;
    create(sel: Selection.Mutable, data: {}): Promise<any>;
    upsert(sel: Selection.Mutable, data: any[], keys: string[]): Promise<{}>;
    withTransaction(callback: () => Promise<void>): Promise<void>;
}
export namespace SQLiteDriver {
    interface Config {
        path: string;
    }
    const Config: z<Config>;
}
export default SQLiteDriver;
