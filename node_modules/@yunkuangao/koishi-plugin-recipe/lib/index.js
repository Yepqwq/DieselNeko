"use strict";
/*
 *     该副本基于koishi框架,仅用于娱乐目的。
 *     Copyright (C) 2023-present yun
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as
 *     published by the Free Software Foundation, either version 3 of the
 *     License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     You should have received a copy of the GNU Affero General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.apply = exports.schema = exports.usage = exports.name = void 0;
const koishi_1 = require("koishi");
exports.name = 'recipe';
exports.usage = '这个插件用于提供每日菜单';
exports.schema = koishi_1.Schema.object({
    json_url: koishi_1.Schema.string().default("https://git.yka.moe/yun/recipe-source/raw/branch/main/default.json"),
});
async function apply(ctx, config) {
    const originJsonUrl = config.json_url.toString();
    let recipes = new Map;
    // 先获取json文件地址
    const originJson = await ctx.http.get(originJsonUrl).catch(() => {
        throw new Error("获取json文件失败");
    });
    // 遍历json
    originJson.data.forEach(lt => recipes.set(lt.name, lt.name));
    const labels = getLabelList(originJson);
    const labelRecipeList = getLabelRecipeList(labels, originJson);
    // 注册主指令
    ctx.command("recipe")
        .option('label', '-l [label]')
        .action(async ({ session, options }) => {
        if (options.label != undefined) {
            await session.send(options.label == "" ? labels.join("\n") : getRandomArrayItem(labelRecipeList.get(options.label)));
            //h.at(session.userId) + "," + h.text(`今日推荐:${values.toString()}`)
        }
        else {
            // 返回个随机的就行了,没那么多有的没的
            const values = getRandomItem(recipes);
            await session.send(values.toString());
        }
    });
    // 然后将每个分类名称装载成指令
    labelRecipeList.forEach((value, key) => {
        ctx.command("recipe/" + key)
            .action(async ({ session }) => {
            await session.send(getRandomArrayItem(value));
        });
    });
}
exports.apply = apply;
function getLabelList(json) {
    let result = [];
    json.data.map((item) => {
        result.push(...item.label);
    });
    return Array.from(new Set(result));
}
function getLabelRecipeList(labels, json) {
    let result = new Map;
    labels.forEach(it => {
        const value = json.data.map((item) => {
            if (item.label.includes(it))
                return item.name;
        });
        result.set(it, value.filter(item => item !== undefined));
    });
    return result;
}
const getRandomItem = iterable => iterable.get([...iterable.keys()][Math.floor(Math.random() * iterable.size)]);
const getRandomArrayItem = arr => arr[Math.floor((Math.random() * arr.length))];
