var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Discord: () => utils_exports,
  DiscordBot: () => DiscordBot,
  DiscordMessageEncoder: () => DiscordMessageEncoder,
  WsClient: () => WsClient,
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);

// src/bot.ts
var import_satori5 = require("@satorijs/satori");

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  ActivityFlag: () => ActivityFlag,
  ActivityType: () => ActivityType,
  AllowedMentionType: () => AllowedMentionType,
  ApplicationCommand: () => ApplicationCommand2,
  ApplicationFlag: () => ApplicationFlag,
  ApplicationRoleConnection: () => ApplicationRoleConnection,
  AuditLog: () => AuditLog,
  AutoModerationAction: () => AutoModerationAction,
  AutoModerationRule: () => AutoModerationRule2,
  ButtonStyles: () => ButtonStyles,
  Channel: () => Channel2,
  ComponentType: () => ComponentType,
  DeviceType: () => DeviceType,
  Gateway: () => Gateway,
  Guild: () => Guild3,
  GuildFeature: () => GuildFeature,
  GuildScheduledEvent: () => GuildScheduledEvent3,
  IntegrationExpireBehavior: () => IntegrationExpireBehavior,
  Interaction: () => Interaction,
  Internal: () => Internal,
  Invite: () => Invite,
  Locale: () => Locale3,
  MembershipState: () => MembershipState,
  Message: () => Message2,
  OverwriteType: () => OverwriteType,
  Permission: () => Permission,
  PremiumType: () => PremiumType,
  StatusType: () => StatusType2,
  Sticker: () => Sticker3,
  SystemChannelFlag: () => SystemChannelFlag,
  TextInputStyles: () => TextInputStyles,
  UserFlag: () => UserFlag,
  VisibilityType: () => VisibilityType,
  Webhook: () => Webhook2,
  adaptSession: () => adaptSession,
  decodeChannel: () => decodeChannel,
  decodeGuild: () => decodeGuild,
  decodeGuildMember: () => decodeGuildMember,
  decodeMessage: () => decodeMessage,
  decodeRole: () => decodeRole,
  decodeUser: () => decodeUser,
  encodeCommand: () => encodeCommand,
  encodeCommandOptions: () => encodeCommandOptions,
  encodeRole: () => encodeRole,
  sanitize: () => sanitize,
  setupMessageGuildId: () => setupMessageGuildId
});
var import_satori2 = require("@satorijs/satori");

// src/types/internal.ts
var import_satori = require("@satorijs/satori");
var Internal = class _Internal {
  constructor(bot) {
    this.bot = bot;
  }
  static {
    __name(this, "Internal");
  }
  static define(routes) {
    for (const path in routes) {
      for (const key in routes[path]) {
        const method = key;
        for (const name of (0, import_satori.makeArray)(routes[path][method])) {
          _Internal.prototype[name] = async function(...args) {
            const raw = args.join(", ");
            const url = path.replace(/\{([^}]+)\}/g, () => {
              if (!args.length)
                throw new Error(`too few arguments for ${path}, received ${raw}`);
              return args.shift();
            });
            const config = {};
            if (args.length === 1) {
              if (method === "GET" || method === "DELETE") {
                config.params = args[0];
              } else {
                config.data = args[0];
              }
            } else if (args.length === 2 && method !== "GET" && method !== "DELETE") {
              config.data = args[0];
              config.params = args[1];
            } else if (args.length > 1) {
              throw new Error(`too many arguments for ${path}, received ${raw}`);
            }
            try {
              this.bot.logger.debug(`${method} ${url}`, config);
              return (await this.bot.http(method, url, config)).data;
            } catch (error) {
              if (!import_satori.Quester.Error.is(error) || !error.response)
                throw error;
              throw new Error(`[${error.response.status}] ${JSON.stringify(error.response.data)}`);
            }
          };
        }
      }
    }
  }
};

// src/types/application.ts
var ApplicationFlag = /* @__PURE__ */ ((ApplicationFlag2) => {
  ApplicationFlag2[ApplicationFlag2["GATEWAY_PRESENCE"] = 4096] = "GATEWAY_PRESENCE";
  ApplicationFlag2[ApplicationFlag2["GATEWAY_PRESENCE_LIMITED"] = 8192] = "GATEWAY_PRESENCE_LIMITED";
  ApplicationFlag2[ApplicationFlag2["GATEWAY_GUILD_MEMBERS"] = 16384] = "GATEWAY_GUILD_MEMBERS";
  ApplicationFlag2[ApplicationFlag2["GATEWAY_GUILD_MEMBERS_LIMITED"] = 32768] = "GATEWAY_GUILD_MEMBERS_LIMITED";
  ApplicationFlag2[ApplicationFlag2["VERIFICATION_PENDING_GUILD_LIMIT"] = 65536] = "VERIFICATION_PENDING_GUILD_LIMIT";
  ApplicationFlag2[ApplicationFlag2["EMBEDDED"] = 131072] = "EMBEDDED";
  ApplicationFlag2[ApplicationFlag2["GATEWAY_MESSAGE_CONTENT"] = 262144] = "GATEWAY_MESSAGE_CONTENT";
  ApplicationFlag2[ApplicationFlag2["GATEWAY_MESSAGE_CONTENT_LIMITED"] = 524288] = "GATEWAY_MESSAGE_CONTENT_LIMITED";
  ApplicationFlag2[ApplicationFlag2["APPLICATION_COMMAND_BADGE"] = 8388608] = "APPLICATION_COMMAND_BADGE";
  return ApplicationFlag2;
})(ApplicationFlag || {});
Internal.define({
  "/oauth2/applications/@me": {
    GET: "getCurrentBotApplicationInformation"
  },
  "/oauth2/@me": {
    GET: "getCurrentAuthorizationInformation"
  }
});

// src/types/application-role-connection.ts
var ApplicationRoleConnection;
((ApplicationRoleConnection2) => {
  let MetadataType;
  ((MetadataType2) => {
    MetadataType2[MetadataType2["INTEGER_LESS_THAN_OR_EQUAL"] = 1] = "INTEGER_LESS_THAN_OR_EQUAL";
    MetadataType2[MetadataType2["INTEGER_GREATER_THAN_OR_EQUAL"] = 2] = "INTEGER_GREATER_THAN_OR_EQUAL";
    MetadataType2[MetadataType2["INTEGER_EQUAL"] = 3] = "INTEGER_EQUAL";
    MetadataType2[MetadataType2["INTEGER_NOT_EQUAL"] = 4] = "INTEGER_NOT_EQUAL";
    MetadataType2[MetadataType2["DATETIME_LESS_THAN_OR_EQUAL"] = 5] = "DATETIME_LESS_THAN_OR_EQUAL";
    MetadataType2[MetadataType2["DATETIME_GREATER_THAN_OR_EQUAL"] = 6] = "DATETIME_GREATER_THAN_OR_EQUAL";
    MetadataType2[MetadataType2["BOOLEAN_EQUAL"] = 7] = "BOOLEAN_EQUAL";
    MetadataType2[MetadataType2["BOOLEAN_NOT_EQUAL"] = 8] = "BOOLEAN_NOT_EQUAL";
  })(MetadataType = ApplicationRoleConnection2.MetadataType || (ApplicationRoleConnection2.MetadataType = {}));
})(ApplicationRoleConnection || (ApplicationRoleConnection = {}));
Internal.define({
  "/applications/{application.id}/role-connections/metadata": {
    GET: "getApplicationRoleConnectionMetadataRecords",
    PUT: "updateApplicationRoleConnectionMetadataRecords"
  }
});

// src/types/audit-log.ts
var AuditLog;
((AuditLog2) => {
  let Type;
  ((Type2) => {
    Type2[Type2["GUILD_UPDATE"] = 1] = "GUILD_UPDATE";
    Type2[Type2["CHANNEL_CREATE"] = 10] = "CHANNEL_CREATE";
    Type2[Type2["CHANNEL_UPDATE"] = 11] = "CHANNEL_UPDATE";
    Type2[Type2["CHANNEL_DELETE"] = 12] = "CHANNEL_DELETE";
    Type2[Type2["CHANNEL_OVERWRITE_CREATE"] = 13] = "CHANNEL_OVERWRITE_CREATE";
    Type2[Type2["CHANNEL_OVERWRITE_UPDATE"] = 14] = "CHANNEL_OVERWRITE_UPDATE";
    Type2[Type2["CHANNEL_OVERWRITE_DELETE"] = 15] = "CHANNEL_OVERWRITE_DELETE";
    Type2[Type2["MEMBER_KICK"] = 20] = "MEMBER_KICK";
    Type2[Type2["MEMBER_PRUNE"] = 21] = "MEMBER_PRUNE";
    Type2[Type2["MEMBER_BAN_ADD"] = 22] = "MEMBER_BAN_ADD";
    Type2[Type2["MEMBER_BAN_REMOVE"] = 23] = "MEMBER_BAN_REMOVE";
    Type2[Type2["MEMBER_UPDATE"] = 24] = "MEMBER_UPDATE";
    Type2[Type2["MEMBER_ROLE_UPDATE"] = 25] = "MEMBER_ROLE_UPDATE";
    Type2[Type2["MEMBER_MOVE"] = 26] = "MEMBER_MOVE";
    Type2[Type2["MEMBER_DISCONNECT"] = 27] = "MEMBER_DISCONNECT";
    Type2[Type2["BOT_ADD"] = 28] = "BOT_ADD";
    Type2[Type2["ROLE_CREATE"] = 30] = "ROLE_CREATE";
    Type2[Type2["ROLE_UPDATE"] = 31] = "ROLE_UPDATE";
    Type2[Type2["ROLE_DELETE"] = 32] = "ROLE_DELETE";
    Type2[Type2["INVITE_CREATE"] = 40] = "INVITE_CREATE";
    Type2[Type2["INVITE_UPDATE"] = 41] = "INVITE_UPDATE";
    Type2[Type2["INVITE_DELETE"] = 42] = "INVITE_DELETE";
    Type2[Type2["WEBHOOK_CREATE"] = 50] = "WEBHOOK_CREATE";
    Type2[Type2["WEBHOOK_UPDATE"] = 51] = "WEBHOOK_UPDATE";
    Type2[Type2["WEBHOOK_DELETE"] = 52] = "WEBHOOK_DELETE";
    Type2[Type2["EMOJI_CREATE"] = 60] = "EMOJI_CREATE";
    Type2[Type2["EMOJI_UPDATE"] = 61] = "EMOJI_UPDATE";
    Type2[Type2["EMOJI_DELETE"] = 62] = "EMOJI_DELETE";
    Type2[Type2["MESSAGE_DELETE"] = 72] = "MESSAGE_DELETE";
    Type2[Type2["MESSAGE_BULK_DELETE"] = 73] = "MESSAGE_BULK_DELETE";
    Type2[Type2["MESSAGE_PIN"] = 74] = "MESSAGE_PIN";
    Type2[Type2["MESSAGE_UNPIN"] = 75] = "MESSAGE_UNPIN";
    Type2[Type2["INTEGRATION_CREATE"] = 80] = "INTEGRATION_CREATE";
    Type2[Type2["INTEGRATION_UPDATE"] = 81] = "INTEGRATION_UPDATE";
    Type2[Type2["INTEGRATION_DELETE"] = 82] = "INTEGRATION_DELETE";
    Type2[Type2["STAGE_INSTANCE_CREATE"] = 83] = "STAGE_INSTANCE_CREATE";
    Type2[Type2["STAGE_INSTANCE_UPDATE"] = 84] = "STAGE_INSTANCE_UPDATE";
    Type2[Type2["STAGE_INSTANCE_DELETE"] = 85] = "STAGE_INSTANCE_DELETE";
    Type2[Type2["STICKER_CREATE"] = 90] = "STICKER_CREATE";
    Type2[Type2["STICKER_UPDATE"] = 91] = "STICKER_UPDATE";
    Type2[Type2["STICKER_DELETE"] = 92] = "STICKER_DELETE";
    Type2[Type2["GUILD_SCHEDULED_EVENT_CREATE"] = 100] = "GUILD_SCHEDULED_EVENT_CREATE";
    Type2[Type2["GUILD_SCHEDULED_EVENT_UPDATE"] = 101] = "GUILD_SCHEDULED_EVENT_UPDATE";
    Type2[Type2["GUILD_SCHEDULED_EVENT_DELETE"] = 102] = "GUILD_SCHEDULED_EVENT_DELETE";
    Type2[Type2["THREAD_CREATE"] = 110] = "THREAD_CREATE";
    Type2[Type2["THREAD_UPDATE"] = 111] = "THREAD_UPDATE";
    Type2[Type2["THREAD_DELETE"] = 112] = "THREAD_DELETE";
    Type2[Type2["APPLICATION_COMMAND_PERMISSION_UPDATE"] = 121] = "APPLICATION_COMMAND_PERMISSION_UPDATE";
    Type2[Type2["AUTO_MODERATION_RULE_CREATE"] = 140] = "AUTO_MODERATION_RULE_CREATE";
    Type2[Type2["AUTO_MODERATION_RULE_UPDATE"] = 141] = "AUTO_MODERATION_RULE_UPDATE";
    Type2[Type2["AUTO_MODERATION_RULE_DELETE"] = 142] = "AUTO_MODERATION_RULE_DELETE";
    Type2[Type2["AUTO_MODERATION_BLOCK_MESSAGE"] = 143] = "AUTO_MODERATION_BLOCK_MESSAGE";
    Type2[Type2["AUTO_MODERATION_FLAG_TO_CHANNEL"] = 144] = "AUTO_MODERATION_FLAG_TO_CHANNEL";
    Type2[Type2["AUTO_MODERATION_USER_COMMUNICATION_DISABLED"] = 145] = "AUTO_MODERATION_USER_COMMUNICATION_DISABLED";
  })(Type = AuditLog2.Type || (AuditLog2.Type = {}));
})(AuditLog || (AuditLog = {}));
Internal.define({
  "/guilds/{guild.id}/audit-logs": {
    GET: "getGuildAuditLog"
  }
});

// src/types/auto-moderation.ts
var AutoModerationRule2;
((AutoModerationRule3) => {
  let EventType;
  ((EventType2) => {
    EventType2[EventType2["MESSAGE_SEND"] = 1] = "MESSAGE_SEND";
  })(EventType = AutoModerationRule3.EventType || (AutoModerationRule3.EventType = {}));
  let TriggerType;
  ((TriggerType2) => {
    TriggerType2[TriggerType2["KEYWORD"] = 1] = "KEYWORD";
    TriggerType2[TriggerType2["SPAM"] = 3] = "SPAM";
    TriggerType2[TriggerType2["KEYWORD_PRESET"] = 4] = "KEYWORD_PRESET";
    TriggerType2[TriggerType2["MENTION_SPAM"] = 5] = "MENTION_SPAM";
  })(TriggerType = AutoModerationRule3.TriggerType || (AutoModerationRule3.TriggerType = {}));
  let KeywordPresetType;
  ((KeywordPresetType2) => {
    KeywordPresetType2[KeywordPresetType2["PROFANITY"] = 1] = "PROFANITY";
    KeywordPresetType2[KeywordPresetType2["SEXUAL_CONTEN"] = 2] = "SEXUAL_CONTEN";
    KeywordPresetType2[KeywordPresetType2["SLURS"] = 3] = "SLURS";
  })(KeywordPresetType = AutoModerationRule3.KeywordPresetType || (AutoModerationRule3.KeywordPresetType = {}));
})(AutoModerationRule2 || (AutoModerationRule2 = {}));
var AutoModerationAction;
((AutoModerationAction2) => {
  let Type;
  ((Type2) => {
    Type2[Type2["BLOCK_MESSAGE"] = 1] = "BLOCK_MESSAGE";
    Type2[Type2["SEND_ALERT_MESSAGE"] = 2] = "SEND_ALERT_MESSAGE";
    Type2[Type2["TIMEOUT"] = 3] = "TIMEOUT";
  })(Type = AutoModerationAction2.Type || (AutoModerationAction2.Type = {}));
})(AutoModerationAction || (AutoModerationAction = {}));
Internal.define({
  "/guilds/{guild.id}/auto-moderation/rules": {
    GET: "listAutoModerationRules",
    POST: "createAutoModerationRule"
  },
  "/guilds/{guild.id}/auto-moderation/rules/{rule.id}": {
    GET: "getAutoModerationRule",
    PATCH: "modifyAutoModerationRule",
    DELETE: "deleteAutoModerationRule"
  }
});

// src/types/ban.ts
Internal.define({
  "/guilds/{guild.id}/bans": {
    GET: "getGuildBans"
  },
  "/guilds/{guild.id}/bans/{user.id}": {
    GET: "getGuildBan",
    PUT: "createGuildBan",
    DELETE: "removeGuildBan"
  }
});

// src/types/channel.ts
var Channel2;
((Channel11) => {
  let Type;
  ((Type2) => {
    Type2[Type2["GUILD_TEXT"] = 0] = "GUILD_TEXT";
    Type2[Type2["DM"] = 1] = "DM";
    Type2[Type2["GUILD_VOICE"] = 2] = "GUILD_VOICE";
    Type2[Type2["GROUP_DM"] = 3] = "GROUP_DM";
    Type2[Type2["GUILD_CATEGORY"] = 4] = "GUILD_CATEGORY";
    Type2[Type2["GUILD_NEWS"] = 5] = "GUILD_NEWS";
    Type2[Type2["GUILD_STORE"] = 6] = "GUILD_STORE";
    Type2[Type2["GUILD_NEWS_THREAD"] = 10] = "GUILD_NEWS_THREAD";
    Type2[Type2["GUILD_PUBLIC_THREAD"] = 11] = "GUILD_PUBLIC_THREAD";
    Type2[Type2["GUILD_PRIVATE_THREAD"] = 12] = "GUILD_PRIVATE_THREAD";
    Type2[Type2["GUILD_STAGE_VOICE"] = 13] = "GUILD_STAGE_VOICE";
    Type2[Type2["GUILD_DIRECTORY"] = 14] = "GUILD_DIRECTORY";
    Type2[Type2["GUILD_FORUM"] = 15] = "GUILD_FORUM";
  })(Type = Channel11.Type || (Channel11.Type = {}));
})(Channel2 || (Channel2 = {}));
var OverwriteType = /* @__PURE__ */ ((OverwriteType2) => {
  OverwriteType2[OverwriteType2["ROLE"] = 0] = "ROLE";
  OverwriteType2[OverwriteType2["MEMBER"] = 1] = "MEMBER";
  return OverwriteType2;
})(OverwriteType || {});
var AllowedMentionType = /* @__PURE__ */ ((AllowedMentionType2) => {
  AllowedMentionType2["ROLE_MENTIONS"] = "roles";
  AllowedMentionType2["USER_MENTIONS"] = "users";
  AllowedMentionType2["EVERYONE_MENTIONS"] = "everyone";
  return AllowedMentionType2;
})(AllowedMentionType || {});
Internal.define({
  "/users/@me/channels": {
    POST: ["createDM", "createGroupDM"]
  }
});
Internal.define({
  "/guilds/{guild.id}/channels": {
    GET: "getGuildChannels",
    POST: "createGuildChannel",
    PATCH: "modifyGuildChannelPositions"
  }
});
Internal.define({
  "/channels/{channel.id}": {
    GET: "getChannel",
    PATCH: "modifyChannel",
    DELETE: "deleteChannel"
  },
  "/channels/{channel.id}/permissions/{overwrite.id}": {
    PUT: "editChannelPermissions",
    DELETE: "deleteChannelPermission"
  },
  "/channels/{channel.id}/followers": {
    POST: "followNewsChannel"
  },
  "/channels/{channel.id}/typing": {
    POST: "triggerTypingIndicator"
  },
  "/channels/{channel.id}/recipients/{user.id}": {
    PUT: "groupDMAddRecipient",
    DELETE: "groupDMRemoveRecipient"
  }
});

// src/types/command.ts
var ApplicationCommand2;
((ApplicationCommand4) => {
  let Type;
  ((Type2) => {
    Type2[Type2["CHAT_INPUT"] = 1] = "CHAT_INPUT";
    Type2[Type2["USER"] = 2] = "USER";
    Type2[Type2["MESSAGE"] = 3] = "MESSAGE";
  })(Type = ApplicationCommand4.Type || (ApplicationCommand4.Type = {}));
  let OptionType;
  ((OptionType2) => {
    OptionType2[OptionType2["SUB_COMMAND"] = 1] = "SUB_COMMAND";
    OptionType2[OptionType2["SUB_COMMAND_GROUP"] = 2] = "SUB_COMMAND_GROUP";
    OptionType2[OptionType2["STRING"] = 3] = "STRING";
    OptionType2[OptionType2["INTEGER"] = 4] = "INTEGER";
    OptionType2[OptionType2["BOOLEAN"] = 5] = "BOOLEAN";
    OptionType2[OptionType2["USER"] = 6] = "USER";
    OptionType2[OptionType2["CHANNEL"] = 7] = "CHANNEL";
    OptionType2[OptionType2["ROLE"] = 8] = "ROLE";
    OptionType2[OptionType2["MENTIONABLE"] = 9] = "MENTIONABLE";
    OptionType2[OptionType2["NUMBER"] = 10] = "NUMBER";
    OptionType2[OptionType2["ATTACHMENT"] = 11] = "ATTACHMENT";
  })(OptionType = ApplicationCommand4.OptionType || (ApplicationCommand4.OptionType = {}));
  let PermissionType;
  ((PermissionType2) => {
    PermissionType2[PermissionType2["ROLE"] = 1] = "ROLE";
    PermissionType2[PermissionType2["USER"] = 2] = "USER";
    PermissionType2[PermissionType2["CHANNEL"] = 3] = "CHANNEL";
  })(PermissionType = ApplicationCommand4.PermissionType || (ApplicationCommand4.PermissionType = {}));
})(ApplicationCommand2 || (ApplicationCommand2 = {}));
Internal.define({
  "/applications/{application.id}/commands": {
    GET: "getGlobalApplicationCommands",
    POST: "createGlobalApplicationCommand",
    PUT: "bulkOverwriteGlobalApplicationCommands"
  },
  "/applications/{application.id}/commands/{command.id}": {
    GET: "getGlobalApplicationCommand",
    PATCH: "editGlobalApplicationCommand",
    DELETE: "deleteGlobalApplicationCommand"
  },
  "/applications/{application.id}/guilds/{guild.id}/commands": {
    GET: "getGuildApplicationCommands",
    POST: "createGuildApplicationCommand",
    PUT: "bulkOverwriteGuildApplicationCommands"
  },
  "/applications/{application.id}/guilds/{guild.id}/commands/{command.id}": {
    GET: "getGuildApplicationCommand",
    PATCH: "editGuildApplicationCommand",
    DELETE: "deleteGuildApplicationCommand"
  },
  "/applications/{application.id}/guilds/{guild.id}/commands/permissions": {
    GET: "getGuildApplicationCommandPermissions"
  },
  "/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions": {
    GET: "getApplicationCommandPermissions",
    PUT: "editApplicationCommandPermissions"
  }
});

// src/types/component.ts
var ComponentType = /* @__PURE__ */ ((ComponentType3) => {
  ComponentType3[ComponentType3["ACTION_ROW"] = 1] = "ACTION_ROW";
  ComponentType3[ComponentType3["BUTTON"] = 2] = "BUTTON";
  ComponentType3[ComponentType3["SELECT_MENU"] = 3] = "SELECT_MENU";
  ComponentType3[ComponentType3["TEXT_INPUT"] = 4] = "TEXT_INPUT";
  ComponentType3[ComponentType3["USER_SELECT"] = 5] = "USER_SELECT";
  ComponentType3[ComponentType3["ROLE_SELECT"] = 6] = "ROLE_SELECT";
  ComponentType3[ComponentType3["MENTIONABLE_SELECT"] = 7] = "MENTIONABLE_SELECT";
  ComponentType3[ComponentType3["CHANNEL_SELECT"] = 8] = "CHANNEL_SELECT";
  return ComponentType3;
})(ComponentType || {});
var ButtonStyles = /* @__PURE__ */ ((ButtonStyles2) => {
  ButtonStyles2[ButtonStyles2["PRIMARY"] = 1] = "PRIMARY";
  ButtonStyles2[ButtonStyles2["SECONDARY"] = 2] = "SECONDARY";
  ButtonStyles2[ButtonStyles2["SUCCESS"] = 3] = "SUCCESS";
  ButtonStyles2[ButtonStyles2["DANGER"] = 4] = "DANGER";
  ButtonStyles2[ButtonStyles2["LINK"] = 5] = "LINK";
  return ButtonStyles2;
})(ButtonStyles || {});
var TextInputStyles = /* @__PURE__ */ ((TextInputStyles2) => {
  TextInputStyles2[TextInputStyles2["SHORT"] = 1] = "SHORT";
  TextInputStyles2[TextInputStyles2["PARAGRAPH"] = 2] = "PARAGRAPH";
  return TextInputStyles2;
})(TextInputStyles || {});

// src/types/device.ts
var DeviceType = /* @__PURE__ */ ((DeviceType2) => {
  DeviceType2["AUDIO_INPUT"] = "audioinput";
  DeviceType2["AUDIO_OUTPUT"] = "audiooutput";
  DeviceType2["VIDEO_INPUT"] = "videoinput";
  return DeviceType2;
})(DeviceType || {});

// src/types/emoji.ts
Internal.define({
  "/guilds/{guild.id}/emojis": {
    GET: "listGuildEmojis",
    POST: "createGuildEmoji"
  },
  "/guilds/{guild.id}/emojis/{emoji.id}": {
    GET: "getGuildEmoji",
    PATCH: "modifyGuildEmoji",
    DELETE: "deleteGuildEmoji"
  }
});

// src/types/gateway.ts
var Gateway;
((Gateway3) => {
  let Opcode;
  ((Opcode2) => {
    Opcode2[Opcode2["DISPATCH"] = 0] = "DISPATCH";
    Opcode2[Opcode2["HEARTBEAT"] = 1] = "HEARTBEAT";
    Opcode2[Opcode2["IDENTIFY"] = 2] = "IDENTIFY";
    Opcode2[Opcode2["PRESENCE_UPDATE"] = 3] = "PRESENCE_UPDATE";
    Opcode2[Opcode2["VOICE_STATE_UPDATE"] = 4] = "VOICE_STATE_UPDATE";
    Opcode2[Opcode2["RESUME"] = 6] = "RESUME";
    Opcode2[Opcode2["RECONNECT"] = 7] = "RECONNECT";
    Opcode2[Opcode2["REQUEST_GUILD_MEMBERS"] = 8] = "REQUEST_GUILD_MEMBERS";
    Opcode2[Opcode2["INVALID_SESSION"] = 9] = "INVALID_SESSION";
    Opcode2[Opcode2["HELLO"] = 10] = "HELLO";
    Opcode2[Opcode2["HEARTBEAT_ACK"] = 11] = "HEARTBEAT_ACK";
  })(Opcode = Gateway3.Opcode || (Gateway3.Opcode = {}));
  let Intent;
  ((Intent2) => {
    Intent2[Intent2["GUILDS"] = 1] = "GUILDS";
    Intent2[Intent2["GUILD_MEMBERS"] = 2] = "GUILD_MEMBERS";
    Intent2[Intent2["GUILD_BANS"] = 4] = "GUILD_BANS";
    Intent2[Intent2["GUILD_EMOJIS_AND_STICKERS"] = 8] = "GUILD_EMOJIS_AND_STICKERS";
    Intent2[Intent2["GUILD_INTEGRATIONS"] = 16] = "GUILD_INTEGRATIONS";
    Intent2[Intent2["GUILD_WEBHOOKS"] = 32] = "GUILD_WEBHOOKS";
    Intent2[Intent2["GUILD_INVITES"] = 64] = "GUILD_INVITES";
    Intent2[Intent2["GUILD_VOICE_STATES"] = 128] = "GUILD_VOICE_STATES";
    Intent2[Intent2["GUILD_PRESENCES"] = 256] = "GUILD_PRESENCES";
    Intent2[Intent2["GUILD_MESSAGES"] = 512] = "GUILD_MESSAGES";
    Intent2[Intent2["GUILD_MESSAGE_REACTIONS"] = 1024] = "GUILD_MESSAGE_REACTIONS";
    Intent2[Intent2["GUILD_MESSAGE_TYPING"] = 2048] = "GUILD_MESSAGE_TYPING";
    Intent2[Intent2["DIRECT_MESSAGES"] = 4096] = "DIRECT_MESSAGES";
    Intent2[Intent2["DIRECT_MESSAGE_REACTIONS"] = 8192] = "DIRECT_MESSAGE_REACTIONS";
    Intent2[Intent2["DIRECT_MESSAGE_TYPING"] = 16384] = "DIRECT_MESSAGE_TYPING";
    Intent2[Intent2["MESSAGE_CONTENT"] = 32768] = "MESSAGE_CONTENT";
    Intent2[Intent2["GUILD_SCHEDULED_EVENTS"] = 65536] = "GUILD_SCHEDULED_EVENTS";
    Intent2[Intent2["AUTO_MODERATION_CONFIGURATION"] = 1048576] = "AUTO_MODERATION_CONFIGURATION";
    Intent2[Intent2["AUTO_MODERATION_EXECUTION"] = 2097152] = "AUTO_MODERATION_EXECUTION";
  })(Intent = Gateway3.Intent || (Gateway3.Intent = {}));
})(Gateway || (Gateway = {}));
Internal.define({
  "/gateway": {
    GET: "getGateway"
  },
  "/gateway/bot": {
    GET: "getGatewayBot"
  }
});

// src/types/guild-member.ts
Internal.define({
  "/guilds/{guild.id}/members/{user.id}": {
    GET: "getGuildMember",
    PUT: "addGuildMember",
    PATCH: "modifyGuildMember",
    DELETE: "removeGuildMember"
  },
  "/guilds/{guild.id}/members": {
    GET: "listGuildMembers"
  },
  "/guilds/{guild.id}/members/search": {
    GET: "searchGuildMembers"
  },
  "/guilds/{guild.id}/members/@me": {
    PATCH: "modifyCurrentMember"
  },
  "/guilds/{guild.id}/members/{user.id}/roles/{role.id}": {
    PUT: "addGuildMemberRole",
    DELETE: "removeGuildMemberRole"
  },
  "/guilds/{guild.id}/prune": {
    GET: "getGuildPruneCount",
    POST: "beginGuildPrune"
  }
});

// src/types/guild-template.ts
Internal.define({
  "/guilds/templates/{template.code}": {
    GET: "getGuildTemplate",
    POST: "createGuildfromGuildTemplate"
  },
  "/guilds/{guild.id}/templates": {
    GET: "getGuildTemplates",
    POST: "createGuildTemplate"
  },
  "/guilds/{guild.id}/templates/{template.code}": {
    PUT: "syncGuildTemplate",
    PATCH: "modifyGuildTemplate",
    DELETE: "deleteGuildTemplate"
  }
});

// src/types/guild.ts
var Guild3;
((Guild6) => {
  let Params;
  ((Params2) => {
    let WidgetStyleOptions;
    ((WidgetStyleOptions2) => {
      WidgetStyleOptions2["shield"] = "shield";
      WidgetStyleOptions2["banner1"] = "banner1";
      WidgetStyleOptions2["banner2"] = "banner2";
      WidgetStyleOptions2["banner3"] = "banner3";
      WidgetStyleOptions2["banner4"] = "banner4";
    })(WidgetStyleOptions = Params2.WidgetStyleOptions || (Params2.WidgetStyleOptions = {}));
  })(Params = Guild6.Params || (Guild6.Params = {}));
})(Guild3 || (Guild3 = {}));
var SystemChannelFlag = /* @__PURE__ */ ((SystemChannelFlag2) => {
  SystemChannelFlag2[SystemChannelFlag2["SUPPRESS_JOIN_NOTIFICATIONS"] = 1] = "SUPPRESS_JOIN_NOTIFICATIONS";
  SystemChannelFlag2[SystemChannelFlag2["SUPPRESS_PREMIUM_SUBSCRIPTIONS"] = 2] = "SUPPRESS_PREMIUM_SUBSCRIPTIONS";
  SystemChannelFlag2[SystemChannelFlag2["SUPPRESS_GUILD_REMINDER_NOTIFICATIONS"] = 4] = "SUPPRESS_GUILD_REMINDER_NOTIFICATIONS";
  SystemChannelFlag2[SystemChannelFlag2["SUPPRESS_JOIN_NOTIFICATION_REPLIES"] = 8] = "SUPPRESS_JOIN_NOTIFICATION_REPLIES";
  SystemChannelFlag2[SystemChannelFlag2["SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS"] = 16] = "SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS";
  SystemChannelFlag2[SystemChannelFlag2["SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES"] = 32] = "SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES";
  return SystemChannelFlag2;
})(SystemChannelFlag || {});
var GuildFeature = /* @__PURE__ */ ((GuildFeature2) => {
  GuildFeature2["ANIMATED_ICON"] = "ANIMATED_ICON";
  GuildFeature2["BANNER"] = "BANNER";
  GuildFeature2["COMMERCE"] = "COMMERCE";
  GuildFeature2["COMMUNITY"] = "COMMUNITY";
  GuildFeature2["DISCOVERABLE"] = "DISCOVERABLE";
  GuildFeature2["FEATURABLE"] = "FEATURABLE";
  GuildFeature2["INVITE_SPLASH"] = "INVITE_SPLASH";
  GuildFeature2["MEMBER_VERIFICATION_GATE_ENABLED"] = "MEMBER_VERIFICATION_GATE_ENABLED";
  GuildFeature2["MONETIZATION_ENABLED"] = "MONETIZATION_ENABLED";
  GuildFeature2["MORE_STICKERS"] = "MORE_STICKERS";
  GuildFeature2["NEWS"] = "NEWS";
  GuildFeature2["PARTNERED"] = "PARTNERED";
  GuildFeature2["PREVIEW_ENABLED"] = "PREVIEW_ENABLED";
  GuildFeature2["PRIVATE_THREADS"] = "PRIVATE_THREADS";
  GuildFeature2["ROLE_ICONS"] = "ROLE_ICONS";
  GuildFeature2["SEVEN_DAY_THREAD_ARCHIVE"] = "SEVEN_DAY_THREAD_ARCHIVE";
  GuildFeature2["THREE_DAY_THREAD_ARCHIVE"] = "THREE_DAY_THREAD_ARCHIVE";
  GuildFeature2["TICKETED_EVENTS_ENABLED"] = "TICKETED_EVENTS_ENABLED";
  GuildFeature2["VANITY_URL"] = "VANITY_URL";
  GuildFeature2["VERIFIED"] = "VERIFIED";
  GuildFeature2["VIP_REGIONS"] = "VIP_REGIONS";
  GuildFeature2["WELCOME_SCREEN_ENABLED"] = "WELCOME_SCREEN_ENABLED";
  return GuildFeature2;
})(GuildFeature || {});
Internal.define({
  "/users/@me/guilds": {
    GET: "getCurrentUserGuilds"
  },
  "/users/@me/guilds/{guild.id}/member": {
    GET: "getCurrentUserGuildMember"
  },
  "/users/@me/guilds/{guild.id}": {
    DELETE: "leaveGuild"
  }
});
Internal.define({
  "/guilds": {
    POST: "createGuild"
  },
  "/guilds/{guild.id}": {
    GET: "getGuild",
    PATCH: "modifyGuild",
    DELETE: "deleteGuild"
  },
  "/guilds/{guild.id}/preview": {
    GET: "getGuildPreview"
  },
  "/guilds/{guild.id}/widget": {
    GET: "getGuildWidgetSettings",
    PATCH: "modifyGuildWidget"
  },
  "/guilds/{guild.id}/widget.json": {
    GET: "getGuildWidget"
  },
  "/guilds/{guild.id}/widget.png": {
    GET: "getGuildWidgetImage"
  },
  "/guilds/{guild.id}/welcome-screen": {
    GET: "getGuildWelcomeScreen",
    PATCH: "modifyGuildWelcomeScreen"
  }
});

// src/types/integration.ts
var IntegrationExpireBehavior = /* @__PURE__ */ ((IntegrationExpireBehavior2) => {
  IntegrationExpireBehavior2[IntegrationExpireBehavior2["REMOVE_ROLE"] = 0] = "REMOVE_ROLE";
  IntegrationExpireBehavior2[IntegrationExpireBehavior2["KICK"] = 1] = "KICK";
  return IntegrationExpireBehavior2;
})(IntegrationExpireBehavior || {});
Internal.define({
  "/guilds/{guild.id}/integrations": {
    GET: "getGuildIntegrations"
  },
  "/guilds/{guild.id}/integrations/{integration.id}": {
    DELETE: "deleteGuildIntegration"
  }
});

// src/types/interaction.ts
var Interaction;
((Interaction2) => {
  let Type;
  ((Type2) => {
    Type2[Type2["PING"] = 1] = "PING";
    Type2[Type2["APPLICATION_COMMAND"] = 2] = "APPLICATION_COMMAND";
    Type2[Type2["MESSAGE_COMPONENT"] = 3] = "MESSAGE_COMPONENT";
    Type2[Type2["APPLICATION_COMMAND_AUTOCOMPLETE"] = 4] = "APPLICATION_COMMAND_AUTOCOMPLETE";
    Type2[Type2["MODAL_SUBMIT"] = 5] = "MODAL_SUBMIT";
  })(Type = Interaction2.Type || (Interaction2.Type = {}));
})(Interaction || (Interaction = {}));
((Interaction2) => {
  let CallbackType;
  ((CallbackType2) => {
    CallbackType2[CallbackType2["PONG"] = 1] = "PONG";
    CallbackType2[CallbackType2["CHANNEL_MESSAGE_WITH_SOURCE"] = 4] = "CHANNEL_MESSAGE_WITH_SOURCE";
    CallbackType2[CallbackType2["DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE"] = 5] = "DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE";
    CallbackType2[CallbackType2["DEFERRED_UPDATE_MESSAGE"] = 6] = "DEFERRED_UPDATE_MESSAGE";
    CallbackType2[CallbackType2["UPDATE_MESSAGE"] = 7] = "UPDATE_MESSAGE";
    CallbackType2[CallbackType2["APPLICATION_COMMAND_AUTOCOMPLETE_RESULT"] = 8] = "APPLICATION_COMMAND_AUTOCOMPLETE_RESULT";
    CallbackType2[CallbackType2["MODAL"] = 9] = "MODAL";
  })(CallbackType = Interaction2.CallbackType || (Interaction2.CallbackType = {}));
})(Interaction || (Interaction = {}));
Internal.define({
  "/interactions/{interaction.id}/{interaction.token}/callback": {
    POST: "createInteractionResponse"
  },
  "/webhooks/{application.id}/{interaction.token}/messages/@original": {
    GET: "getOriginalInteractionResponse",
    PATCH: "editOriginalInteractionResponse",
    DELETE: "deleteOriginalInteractionResponse"
  },
  "/webhooks/{application.id}/{interaction.token}": {
    POST: "createFollowupMessage"
  },
  "/webhooks/{application.id}/{interaction.token}/messages/{message.id}": {
    GET: "getFollowupMessage",
    PATCH: "editFollowupMessage",
    DELETE: "deleteFollowupMessage"
  }
});

// src/types/invite.ts
var Invite;
((Invite2) => {
  let TargetType;
  ((TargetType2) => {
    TargetType2[TargetType2["STREAM"] = 1] = "STREAM";
    TargetType2[TargetType2["EMBEDDED_APPLICATION"] = 2] = "EMBEDDED_APPLICATION";
  })(TargetType = Invite2.TargetType || (Invite2.TargetType = {}));
})(Invite || (Invite = {}));
Internal.define({
  "/invites/{invite.code}": {
    GET: "getInvite",
    DELETE: "deleteInvite"
  },
  "/guilds/{guild.id}/invites": {
    GET: "getGuildInvites"
  },
  "/guilds/{guild.id}/vanity-url": {
    GET: "getGuildVanityURL"
  },
  "/channels/{channel.id}/invites": {
    GET: "getChannelInvites",
    POST: "createChannelInvite"
  }
});

// src/types/message.ts
var Message2;
((Message4) => {
  let Type;
  ((Type2) => {
    Type2[Type2["DEFAULT"] = 0] = "DEFAULT";
    Type2[Type2["RECIPIENT_ADD"] = 1] = "RECIPIENT_ADD";
    Type2[Type2["RECIPIENT_REMOVE"] = 2] = "RECIPIENT_REMOVE";
    Type2[Type2["CALL"] = 3] = "CALL";
    Type2[Type2["CHANNEL_NAME_CHANGE"] = 4] = "CHANNEL_NAME_CHANGE";
    Type2[Type2["CHANNEL_ICON_CHANGE"] = 5] = "CHANNEL_ICON_CHANGE";
    Type2[Type2["CHANNEL_PINNED_MESSAGE"] = 6] = "CHANNEL_PINNED_MESSAGE";
    Type2[Type2["GUILD_MEMBER_JOIN"] = 7] = "GUILD_MEMBER_JOIN";
    Type2[Type2["USER_PREMIUM_GUILD_SUBSCRIPTION"] = 8] = "USER_PREMIUM_GUILD_SUBSCRIPTION";
    Type2[Type2["USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1"] = 9] = "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1";
    Type2[Type2["USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2"] = 10] = "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2";
    Type2[Type2["USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3"] = 11] = "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3";
    Type2[Type2["CHANNEL_FOLLOW_ADD"] = 12] = "CHANNEL_FOLLOW_ADD";
    Type2[Type2["GUILD_DISCOVERY_DISQUALIFIED"] = 14] = "GUILD_DISCOVERY_DISQUALIFIED";
    Type2[Type2["GUILD_DISCOVERY_REQUALIFIED"] = 15] = "GUILD_DISCOVERY_REQUALIFIED";
    Type2[Type2["GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING"] = 16] = "GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING";
    Type2[Type2["GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING"] = 17] = "GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING";
    Type2[Type2["THREAD_CREATED"] = 18] = "THREAD_CREATED";
    Type2[Type2["REPLY"] = 19] = "REPLY";
    Type2[Type2["CHAT_INPUT_COMMAND"] = 20] = "CHAT_INPUT_COMMAND";
    Type2[Type2["THREAD_STARTER_MESSAGE"] = 21] = "THREAD_STARTER_MESSAGE";
    Type2[Type2["GUILD_INVITE_REMINDER"] = 22] = "GUILD_INVITE_REMINDER";
    Type2[Type2["CONTEXT_MENU_COMMAND"] = 23] = "CONTEXT_MENU_COMMAND";
    Type2[Type2["AUTO_MODERATION_ACTION"] = 24] = "AUTO_MODERATION_ACTION";
    Type2[Type2["ROLE_SUBSCRIPTION_PURCHASE"] = 25] = "ROLE_SUBSCRIPTION_PURCHASE";
    Type2[Type2["INTERACTION_PREMIUM_UPSELL"] = 26] = "INTERACTION_PREMIUM_UPSELL";
    Type2[Type2["GUILD_APPLICATION_PREMIUM_SUBSCRIPTION"] = 32] = "GUILD_APPLICATION_PREMIUM_SUBSCRIPTION";
  })(Type = Message4.Type || (Message4.Type = {}));
  let ActivityType2;
  ((ActivityType3) => {
    ActivityType3[ActivityType3["JOIN"] = 1] = "JOIN";
    ActivityType3[ActivityType3["SPECTATE"] = 2] = "SPECTATE";
    ActivityType3[ActivityType3["LISTEN"] = 3] = "LISTEN";
    ActivityType3[ActivityType3["JOIN_REQUEST"] = 5] = "JOIN_REQUEST";
  })(ActivityType2 = Message4.ActivityType || (Message4.ActivityType = {}));
  let Flag;
  ((Flag2) => {
    Flag2[Flag2["CROSSPOSTED"] = 1] = "CROSSPOSTED";
    Flag2[Flag2["IS_CROSSPOST"] = 2] = "IS_CROSSPOST";
    Flag2[Flag2["SUPPRESS_EMBEDS"] = 4] = "SUPPRESS_EMBEDS";
    Flag2[Flag2["SOURCE_MESSAGE_DELETED"] = 8] = "SOURCE_MESSAGE_DELETED";
    Flag2[Flag2["URGENT"] = 16] = "URGENT";
    Flag2[Flag2["HAS_THREAD"] = 32] = "HAS_THREAD";
    Flag2[Flag2["EPHEMERAL"] = 64] = "EPHEMERAL";
    Flag2[Flag2["LOADING"] = 128] = "LOADING";
    Flag2[Flag2["FAILED_TO_MENTION_SOME_ROLES_IN_THREAD"] = 256] = "FAILED_TO_MENTION_SOME_ROLES_IN_THREAD";
    Flag2[Flag2["SUPPRESS_NOTIFICATIONS"] = 4096] = "SUPPRESS_NOTIFICATIONS";
    Flag2[Flag2["IS_VOICE_MESSAGE"] = 8192] = "IS_VOICE_MESSAGE";
  })(Flag = Message4.Flag || (Message4.Flag = {}));
})(Message2 || (Message2 = {}));
Internal.define({
  "/channels/{channel.id}/messages": {
    GET: "getChannelMessages",
    POST: "createMessage"
  },
  "/channels/{channel.id}/messages/{message.id}": {
    GET: "getChannelMessage",
    PATCH: "editMessage",
    DELETE: "deleteMessage"
  },
  "/channels/{channel.id}/messages/{message.id}/crosspost": {
    POST: "crosspostMessage"
  },
  "/channels/{channel.id}/messages/bulk-delete": {
    POST: "bulkDeleteMessages"
  },
  "/channels/{channel.id}/pins": {
    GET: "getPinnedMessages"
  },
  "/channels/{channel.id}/pins/{message.id}": {
    PUT: "pinMessage",
    DELETE: "unpinMessage"
  }
});

// src/types/presence.ts
var StatusType2 = /* @__PURE__ */ ((StatusType3) => {
  StatusType3["ONLINE"] = "ONLINE";
  StatusType3["DND"] = "DND";
  StatusType3["IDLE"] = "IDLE";
  StatusType3["OFFLINE"] = "OFFLINE";
  return StatusType3;
})(StatusType2 || {});
var ActivityType = /* @__PURE__ */ ((ActivityType2) => {
  ActivityType2[ActivityType2["GAME"] = 0] = "GAME";
  ActivityType2[ActivityType2["STREAMING"] = 1] = "STREAMING";
  ActivityType2[ActivityType2["LISTENING"] = 2] = "LISTENING";
  ActivityType2[ActivityType2["WATCHING"] = 3] = "WATCHING";
  ActivityType2[ActivityType2["CUSTOM"] = 4] = "CUSTOM";
  ActivityType2[ActivityType2["COMPETING"] = 5] = "COMPETING";
  return ActivityType2;
})(ActivityType || {});
var ActivityFlag = /* @__PURE__ */ ((ActivityFlag2) => {
  ActivityFlag2[ActivityFlag2["INSTANCE"] = 1] = "INSTANCE";
  ActivityFlag2[ActivityFlag2["JOIN"] = 2] = "JOIN";
  ActivityFlag2[ActivityFlag2["SPECTATE"] = 4] = "SPECTATE";
  ActivityFlag2[ActivityFlag2["JOIN_REQUEST"] = 8] = "JOIN_REQUEST";
  ActivityFlag2[ActivityFlag2["SYNC"] = 16] = "SYNC";
  ActivityFlag2[ActivityFlag2["PLAY"] = 32] = "PLAY";
  ActivityFlag2[ActivityFlag2["PARTY_PRIVACY_FRIENDS"] = 64] = "PARTY_PRIVACY_FRIENDS";
  ActivityFlag2[ActivityFlag2["PARTY_PRIVACY_VOICE_CHANNEL"] = 128] = "PARTY_PRIVACY_VOICE_CHANNEL";
  ActivityFlag2[ActivityFlag2["EMBEDDED"] = 256] = "EMBEDDED";
  return ActivityFlag2;
})(ActivityFlag || {});

// src/types/reaction.ts
Internal.define({
  "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me": {
    PUT: "createReaction",
    DELETE: "deleteOwnReaction"
  },
  "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}": {
    DELETE: "deleteUserReaction"
  },
  "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}": {
    GET: "getReactions",
    DELETE: "deleteAllReactionsforEmoji"
  },
  "/channels/{channel.id}/messages/{message.id}/reactions": {
    DELETE: "deleteAllReactions"
  }
});

// src/types/role.ts
var Permission = /* @__PURE__ */ ((Permission2) => {
  Permission2[Permission2["CREATE_INSTANT_INVITE"] = 1] = "CREATE_INSTANT_INVITE";
  Permission2[Permission2["KICK_MEMBERS"] = 2] = "KICK_MEMBERS";
  Permission2[Permission2["BAN_MEMBERS"] = 4] = "BAN_MEMBERS";
  Permission2[Permission2["ADMINISTRATOR"] = 8] = "ADMINISTRATOR";
  Permission2[Permission2["MANAGE_CHANNELS"] = 16] = "MANAGE_CHANNELS";
  Permission2[Permission2["MANAGE_GUILD"] = 32] = "MANAGE_GUILD";
  Permission2[Permission2["ADD_REACTIONS"] = 64] = "ADD_REACTIONS";
  Permission2[Permission2["VIEW_AUDIT_LOG"] = 128] = "VIEW_AUDIT_LOG";
  Permission2[Permission2["PRIORITY_SPEAKER"] = 256] = "PRIORITY_SPEAKER";
  Permission2[Permission2["STREAM"] = 512] = "STREAM";
  Permission2[Permission2["VIEW_CHANNEL"] = 1024] = "VIEW_CHANNEL";
  Permission2[Permission2["SEND_MESSAGES"] = 2048] = "SEND_MESSAGES";
  Permission2[Permission2["SEND_TTS_MESSAGES"] = 4096] = "SEND_TTS_MESSAGES";
  Permission2[Permission2["MANAGE_MESSAGES"] = 8192] = "MANAGE_MESSAGES";
  Permission2[Permission2["EMBED_LINKS"] = 16384] = "EMBED_LINKS";
  Permission2[Permission2["ATTACH_FILES"] = 32768] = "ATTACH_FILES";
  Permission2[Permission2["READ_MESSAGE_HISTORY"] = 65536] = "READ_MESSAGE_HISTORY";
  Permission2[Permission2["MENTION_EVERYONE"] = 131072] = "MENTION_EVERYONE";
  Permission2[Permission2["USE_EXTERNAL_EMOJIS"] = 262144] = "USE_EXTERNAL_EMOJIS";
  Permission2[Permission2["VIEW_GUILD_INSIGHTS"] = 524288] = "VIEW_GUILD_INSIGHTS";
  Permission2[Permission2["CONNECT"] = 1048576] = "CONNECT";
  Permission2[Permission2["SPEAK"] = 2097152] = "SPEAK";
  Permission2[Permission2["MUTE_MEMBERS"] = 4194304] = "MUTE_MEMBERS";
  Permission2[Permission2["DEAFEN_MEMBERS"] = 8388608] = "DEAFEN_MEMBERS";
  Permission2[Permission2["MOVE_MEMBERS"] = 16777216] = "MOVE_MEMBERS";
  Permission2[Permission2["USE_VAD"] = 33554432] = "USE_VAD";
  Permission2[Permission2["CHANGE_NICKNAME"] = 67108864] = "CHANGE_NICKNAME";
  Permission2[Permission2["MANAGE_NICKNAMES"] = 134217728] = "MANAGE_NICKNAMES";
  Permission2[Permission2["MANAGE_ROLES"] = 268435456] = "MANAGE_ROLES";
  Permission2[Permission2["MANAGE_WEBHOOKS"] = 536870912] = "MANAGE_WEBHOOKS";
  Permission2[Permission2["MANAGE_EMOJIS_AND_STICKERS"] = 1073741824] = "MANAGE_EMOJIS_AND_STICKERS";
  Permission2[Permission2["USE_APPLICATION_COMMANDS"] = -2147483648] = "USE_APPLICATION_COMMANDS";
  Permission2[Permission2["REQUEST_TO_SPEAK"] = 1] = "REQUEST_TO_SPEAK";
  Permission2[Permission2["MANAGE_THREADS"] = 4] = "MANAGE_THREADS";
  Permission2[Permission2["CREATE_PUBLIC_THREADS"] = 8] = "CREATE_PUBLIC_THREADS";
  Permission2[Permission2["CREATE_PRIVATE_THREADS"] = 16] = "CREATE_PRIVATE_THREADS";
  Permission2[Permission2["USE_EXTERNAL_STICKERS"] = 32] = "USE_EXTERNAL_STICKERS";
  Permission2[Permission2["SEND_MESSAGES_IN_THREADS"] = 64] = "SEND_MESSAGES_IN_THREADS";
  Permission2[Permission2["START_EMBEDDED_ACTIVITIES"] = 128] = "START_EMBEDDED_ACTIVITIES";
  Permission2[Permission2["MODERATE_MEMBERS"] = 256] = "MODERATE_MEMBERS";
  return Permission2;
})(Permission || {});
Internal.define({
  "/guilds/{guild.id}/roles": {
    GET: "getGuildRoles",
    POST: "createGuildRole",
    PATCH: "modifyGuildRolePositions"
  },
  "/guilds/{guild.id}/roles/{role.id}": {
    PATCH: "modifyGuildRole",
    DELETE: "deleteGuildRole"
  }
});

// src/types/scheduled-event.ts
var GuildScheduledEvent3;
((GuildScheduledEvent4) => {
  let PrivacyLevel;
  ((PrivacyLevel2) => {
    PrivacyLevel2[PrivacyLevel2["GUILD_ONLY"] = 2] = "GUILD_ONLY";
  })(PrivacyLevel = GuildScheduledEvent4.PrivacyLevel || (GuildScheduledEvent4.PrivacyLevel = {}));
  let EntityType;
  ((EntityType2) => {
    EntityType2[EntityType2["STAGE_INSTANCE"] = 1] = "STAGE_INSTANCE";
    EntityType2[EntityType2["VOICE"] = 2] = "VOICE";
    EntityType2[EntityType2["EXTERNAL"] = 3] = "EXTERNAL";
  })(EntityType = GuildScheduledEvent4.EntityType || (GuildScheduledEvent4.EntityType = {}));
  let Status;
  ((Status2) => {
    Status2[Status2["SCHEDULED"] = 1] = "SCHEDULED";
    Status2[Status2["ACTIVE"] = 2] = "ACTIVE";
    Status2[Status2["COMPLETED"] = 3] = "COMPLETED";
    Status2[Status2["CANCELLED"] = 4] = "CANCELLED";
  })(Status = GuildScheduledEvent4.Status || (GuildScheduledEvent4.Status = {}));
})(GuildScheduledEvent3 || (GuildScheduledEvent3 = {}));
Internal.define({
  "/guilds/{guild.id}/scheduled-events": {
    GET: "listScheduledEventsforGuild",
    POST: "createGuildScheduledEvent"
  },
  "/guilds/{guild.id}/scheduled-events/{guild_scheduled_event.id}": {
    GET: "getGuildScheduledEvent",
    PATCH: "modifyGuildScheduledEvent",
    DELETE: "deleteGuildScheduledEvent"
  },
  "/guilds/{guild.id}/scheduled-events/{guild_scheduled_event.id}/users": {
    GET: "getGuildScheduledEventUsers"
  }
});

// src/types/stage-instance.ts
Internal.define({
  "/stage-instances": {
    POST: "createStageInstance"
  },
  "/stage-instances/{channel.id}": {
    GET: "getStageInstance",
    PATCH: "modifyStageInstance",
    DELETE: "deleteStageInstance"
  }
});

// src/types/sticker.ts
var Sticker3;
((Sticker4) => {
  let Type;
  ((Type2) => {
    Type2[Type2["STANDARD"] = 1] = "STANDARD";
    Type2[Type2["GUILD"] = 2] = "GUILD";
  })(Type = Sticker4.Type || (Sticker4.Type = {}));
  let FormatType;
  ((FormatType2) => {
    FormatType2[FormatType2["PNG"] = 1] = "PNG";
    FormatType2[FormatType2["APNG"] = 2] = "APNG";
    FormatType2[FormatType2["LOTTIE"] = 3] = "LOTTIE";
    FormatType2[FormatType2["GIF"] = 4] = "GIF";
  })(FormatType = Sticker4.FormatType || (Sticker4.FormatType = {}));
})(Sticker3 || (Sticker3 = {}));
Internal.define({
  "/stickers/{sticker.id}": {
    GET: "getSticker"
  },
  "/sticker-packs": {
    GET: "listNitroStickerPacks"
  },
  "/guilds/{guild.id}/stickers": {
    GET: "listGuildStickers",
    POST: "createGuildSticker"
  },
  "/guilds/{guild.id}/stickers/{sticker.id}": {
    GET: "getGuildSticker",
    PATCH: "modifyGuildSticker",
    DELETE: "deleteGuildSticker"
  }
});

// src/types/team.ts
var MembershipState = /* @__PURE__ */ ((MembershipState2) => {
  MembershipState2[MembershipState2["INVITED"] = 1] = "INVITED";
  MembershipState2[MembershipState2["ACCEPTED"] = 2] = "ACCEPTED";
  return MembershipState2;
})(MembershipState || {});

// src/types/thread.ts
Internal.define({
  "/channels/{channel.id}/messages/{message.id}/threads": {
    POST: "startThreadFromMessage"
  },
  "/channels/{channel.id}/threads": {
    POST: ["startThreadWithoutMessage", "startThreadInForumChannel"]
  },
  "/channels/{channel.id}/thread-members/@me": {
    PUT: "joinThread",
    DELETE: "leaveThread"
  },
  "/channels/{channel.id}/thread-members/{user.id}": {
    PUT: "addThreadMember",
    DELETE: "removeThreadMember",
    GET: "getThreadMember"
  },
  "/channels/{channel.id}/thread-members": {
    GET: "listThreadMembers"
  },
  "/channels/{channel.id}/threads/archived/public": {
    GET: "listPublicArchivedThreads"
  },
  "/channels/{channel.id}/threads/archived/private": {
    GET: "listPrivateArchivedThreads"
  },
  "/channels/{channel.id}/users/@me/threads/archived/private": {
    GET: "listJoinedPrivateArchivedThreads"
  }
});

// src/types/user.ts
var UserFlag = /* @__PURE__ */ ((UserFlag2) => {
  UserFlag2[UserFlag2["NONE"] = 0] = "NONE";
  UserFlag2[UserFlag2["DISCORD_EMPLOYEE"] = 1] = "DISCORD_EMPLOYEE";
  UserFlag2[UserFlag2["PARTNERED_SERVER_OWNER"] = 2] = "PARTNERED_SERVER_OWNER";
  UserFlag2[UserFlag2["HYPESQUAD_EVENTS"] = 4] = "HYPESQUAD_EVENTS";
  UserFlag2[UserFlag2["BUG_HUNTER_LEVEL_1"] = 8] = "BUG_HUNTER_LEVEL_1";
  UserFlag2[UserFlag2["HOUSE_BRAVERY"] = 64] = "HOUSE_BRAVERY";
  UserFlag2[UserFlag2["HOUSE_BRILLIANCE"] = 128] = "HOUSE_BRILLIANCE";
  UserFlag2[UserFlag2["HOUSE_BALANCE"] = 256] = "HOUSE_BALANCE";
  UserFlag2[UserFlag2["EARLY_SUPPORTER"] = 512] = "EARLY_SUPPORTER";
  UserFlag2[UserFlag2["TEAM_USER"] = 1024] = "TEAM_USER";
  UserFlag2[UserFlag2["BUG_HUNTER_LEVEL_2"] = 16384] = "BUG_HUNTER_LEVEL_2";
  UserFlag2[UserFlag2["VERIFIED_BOT"] = 65536] = "VERIFIED_BOT";
  UserFlag2[UserFlag2["EARLY_VERIFIED_BOT_DEVELOPER"] = 131072] = "EARLY_VERIFIED_BOT_DEVELOPER";
  UserFlag2[UserFlag2["DISCORD_CERTIFIED_MODERATOR"] = 262144] = "DISCORD_CERTIFIED_MODERATOR";
  UserFlag2[UserFlag2["BOT_HTTP_INTERACTIONS"] = 524288] = "BOT_HTTP_INTERACTIONS";
  UserFlag2[UserFlag2["ACTIVE_DEVELOPER"] = 4194304] = "ACTIVE_DEVELOPER";
  return UserFlag2;
})(UserFlag || {});
var PremiumType = /* @__PURE__ */ ((PremiumType2) => {
  PremiumType2[PremiumType2["NONE"] = 0] = "NONE";
  PremiumType2[PremiumType2["NITRO_CLASSIC"] = 1] = "NITRO_CLASSIC";
  PremiumType2[PremiumType2["NITRO"] = 2] = "NITRO";
  PremiumType2[PremiumType2["NITRO_BASIC"] = 3] = "NITRO_BASIC";
  return PremiumType2;
})(PremiumType || {});
var VisibilityType = /* @__PURE__ */ ((VisibilityType2) => {
  VisibilityType2[VisibilityType2["NONE"] = 0] = "NONE";
  VisibilityType2[VisibilityType2["EVERYONE"] = 1] = "EVERYONE";
  return VisibilityType2;
})(VisibilityType || {});
Internal.define({
  "/users/@me": {
    GET: "getCurrentUser",
    PATCH: "modifyCurrentUser"
  },
  "/users/{user.id}": {
    GET: "getUser"
  },
  "/users/@me/connections": {
    GET: "getUserConnections"
  }
});

// src/types/voice.ts
Internal.define({
  "/voice/regions": {
    GET: "listVoiceRegions"
  },
  "/guilds/{guild.id}/regions": {
    GET: "getGuildVoiceRegions"
  },
  "/guilds/{guild.id}/voice-states/@me": {
    PATCH: "modifyCurrentUserVoiceState"
  },
  "/guilds/{guild.id}/voice-states/{user.id}": {
    PATCH: "modifyUserVoiceState"
  }
});

// src/types/webhook.ts
var Webhook2;
((Webhook4) => {
  let Type;
  ((Type2) => {
    Type2[Type2["INCOMING"] = 1] = "INCOMING";
    Type2[Type2["CHANNEL_FOLLOWER"] = 2] = "CHANNEL_FOLLOWER";
    Type2[Type2["APPLICATION"] = 3] = "APPLICATION";
  })(Type = Webhook4.Type || (Webhook4.Type = {}));
})(Webhook2 || (Webhook2 = {}));
Internal.define({
  "/channels/{channel.id}/webhooks": {
    POST: "createWebhook",
    GET: "getChannelWebhooks"
  },
  "/guilds/{guild.id}/webhooks": {
    GET: "getGuildWebhooks"
  },
  "/webhooks/{webhook.id}": {
    GET: "getWebhook",
    PATCH: "modifyWebhook",
    DELETE: "deleteWebhook"
  },
  "/webhooks/{webhook.id}/{webhook.token}": {
    GET: "getWebhookwithToken",
    PATCH: "modifyWebhookwithToken",
    DELETE: "deleteWebhookwithToken",
    POST: "executeWebhook"
  },
  "/webhooks/{webhook.id}/{webhook.token}/slack": {
    POST: "executeSlackCompatibleWebhook"
  },
  "/webhooks/{webhook.id}/{webhook.token}/github": {
    POST: "executeGitHubCompatibleWebhook"
  },
  "/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}": {
    GET: "getWebhookMessage",
    PATCH: "editWebhookMessage",
    DELETE: "deleteWebhookMessage"
  }
});

// src/types/index.ts
var Locale3 = [
  "da",
  "de",
  "en-GB",
  "en-US",
  "es-ES",
  "fr",
  "hr",
  "it",
  "lt",
  "hu",
  "nl",
  "no",
  "pl",
  "pt-BR",
  "ro",
  "fi",
  "sv-SE",
  "vi",
  "tr",
  "cs",
  "el",
  "bg",
  "ru",
  "uk",
  "hi",
  "th",
  "zh-CN",
  "ja",
  "zh-TW",
  "ko"
];

// src/utils.ts
var sanitize = /* @__PURE__ */ __name((val) => val.replace(/[\\*_`~|()\[\]]/g, "\\$&").replace(/@everyone/g, () => "\\@everyone").replace(/@here/g, () => "\\@here"), "sanitize");
var decodeUser = /* @__PURE__ */ __name((user) => ({
  id: user.id,
  name: user.username,
  userId: user.id,
  avatar: user.avatar && `https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png`,
  username: user.username,
  discriminator: user.discriminator,
  isBot: user.bot || false
}), "decodeUser");
var decodeGuildMember = /* @__PURE__ */ __name((member) => ({
  user: member.user && decodeUser(member.user),
  nick: member.nick,
  roles: member.roles,
  joinedAt: member.joined_at && new Date(member.joined_at).valueOf()
}), "decodeGuildMember");
var decodeGuild = /* @__PURE__ */ __name((data) => ({
  id: data.id,
  name: data.name
}), "decodeGuild");
var decodeChannel = /* @__PURE__ */ __name((data) => ({
  id: data.id,
  name: data.name,
  type: data.type === Channel2.Type.DM ? import_satori2.Universal.Channel.Type.DIRECT : data.type === Channel2.Type.GUILD_VOICE ? import_satori2.Universal.Channel.Type.VOICE : data.type === Channel2.Type.GUILD_CATEGORY ? import_satori2.Universal.Channel.Type.CATEGORY : import_satori2.Universal.Channel.Type.TEXT
}), "decodeChannel");
var decodeRole = /* @__PURE__ */ __name((role) => ({
  ...role,
  permissions: BigInt(role.permissions)
}), "decodeRole");
var encodeRole = /* @__PURE__ */ __name((role) => ({
  ...role,
  permissions: role.permissions && "" + role.permissions
}), "encodeRole");
async function decodeMessage(bot, data, message, payload = message, details = true) {
  const { platform } = bot;
  message.id = message.messageId = data.id;
  message.content = "";
  if (data.content) {
    message.content = data.content.replace(/<@[!&]?(.+?)>/g, (_, id) => {
      if (data.mention_roles.includes(id)) {
        return (0, import_satori2.h)("at", { role: id }).toString();
      } else {
        const user = data.mentions?.find((u) => u.id === id || `${u.username}#${u.discriminator}` === id);
        return import_satori2.h.at(id, { name: user?.username }).toString();
      }
    }).replace(/<a?:(.*):(.+?)>/g, (_, name, id) => {
      const animated = _[1] === "a";
      return (0, import_satori2.h)("face", { id, name, animated, platform }, [
        import_satori2.h.image(`https://cdn.discordapp.com/emojis/${id}.gif?quality=lossless`)
      ]).toString();
    }).replace(/@everyone/g, () => (0, import_satori2.h)("at", { type: "all" }).toString()).replace(/@here/g, () => (0, import_satori2.h)("at", { type: "here" }).toString()).replace(/<#(.+?)>/g, (_, id) => {
      const channel = data.mention_channels?.find((c) => c.id === id);
      return import_satori2.h.sharp(id, { name: channel?.name }).toString();
    });
  }
  if (data.attachments?.length) {
    if (!/\s$/.test(message.content))
      message.content += " ";
    message.content += data.attachments.map((v) => {
      if (v.height && v.width && v.content_type?.startsWith("image/")) {
        return (0, import_satori2.h)("img", {
          src: v.url,
          proxy_url: v.proxy_url,
          file: v.filename
        });
      } else if (v.height && v.width && v.content_type?.startsWith("video/")) {
        return (0, import_satori2.h)("video", {
          src: v.url,
          proxy_url: v.proxy_url,
          file: v.filename
        });
      } else if (v.content_type?.startsWith("audio/")) {
        return (0, import_satori2.h)("record", {
          src: v.url,
          proxy_url: v.proxy_url,
          file: v.filename
        });
      } else {
        return (0, import_satori2.h)("file", {
          src: v.url,
          proxy_url: v.proxy_url,
          file: v.filename
        });
      }
    }).join("");
  }
  for (const embed of data.embeds) {
    if (embed.image) {
      message.content += (0, import_satori2.h)("img", { src: embed.image.url, proxy_url: embed.image.proxy_url });
    }
    if (embed.thumbnail) {
      message.content += (0, import_satori2.h)("img", { src: embed.thumbnail.url, proxy_url: embed.thumbnail.proxy_url });
    }
    if (embed.video) {
      message.content += (0, import_satori2.h)("video", { src: embed.video.url, proxy_url: embed.video.proxy_url });
    }
  }
  message.elements = import_satori2.h.parse(message.content);
  if (details && data.message_reference) {
    const { message_id, channel_id } = data.message_reference;
    message.quote = await bot.getMessage(channel_id, message_id, false);
  }
  if (!payload)
    return message;
  payload.channel = {
    id: data.channel_id,
    type: data.member ? import_satori2.Universal.Channel.Type.TEXT : import_satori2.Universal.Channel.Type.DIRECT
  };
  payload.user = decodeUser(data.author);
  payload.member = data.member && decodeGuildMember(data.member);
  payload.timestamp = new Date(data.timestamp).valueOf() || Date.now();
  return message;
}
__name(decodeMessage, "decodeMessage");
function setupMessageGuildId(session, guildId) {
  session.guildId = guildId;
  session.isDirect = !guildId;
  session.subtype = guildId ? "group" : "private";
}
__name(setupMessageGuildId, "setupMessageGuildId");
function setupReaction(session, data) {
  session.userId = data.user_id;
  session.messageId = data.message_id;
  session.guildId = data.guild_id;
  session.channelId = data.channel_id;
  session.isDirect = !data.guild_id;
  session.subtype = data.guild_id ? "group" : "private";
  if (!data.emoji)
    return;
  const { id, name } = data.emoji;
  session.content = id ? `${name}:${id}` : name;
}
__name(setupReaction, "setupReaction");
async function adaptSession(bot, input) {
  const session = bot.session();
  session.setInternal("discord", input);
  if (input.t === "MESSAGE_CREATE") {
    setupMessageGuildId(session, input.d.guild_id);
    if (input.d.webhook_id && !session.isDirect) {
      try {
        const webhook = await bot.ensureWebhook(input.d.channel_id);
        if (webhook.id === input.d.webhook_id)
          return;
      } catch (e) {
      }
    }
    session.type = "message";
    await decodeMessage(bot, input.d, session.event.message = {}, session.event);
  } else if (input.t === "MESSAGE_UPDATE") {
    session.type = "message-updated";
    const message = await bot.internal.getChannelMessage(input.d.channel_id, input.d.id);
    await decodeMessage(bot, message, session.event.message = {}, session.event);
    const channel = await bot.internal.getChannel(input.d.channel_id);
    setupMessageGuildId(session, channel.guild_id);
  } else if (input.t === "MESSAGE_DELETE") {
    session.type = "message-deleted";
    session.messageId = input.d.id;
    session.channelId = input.d.channel_id;
    setupMessageGuildId(session, input.d.guild_id);
  } else if (input.t === "MESSAGE_REACTION_ADD") {
    session.type = "reaction-added";
    setupReaction(session, input.d);
  } else if (input.t === "MESSAGE_REACTION_REMOVE") {
    session.type = "reaction-deleted";
    session.subtype = "one";
    setupReaction(session, input.d);
  } else if (input.t === "MESSAGE_REACTION_REMOVE_ALL") {
    session.type = "reaction-deleted";
    session.subtype = "all";
    setupReaction(session, input.d);
  } else if (input.t === "MESSAGE_REACTION_REMOVE_EMOJI") {
    session.type = "reaction-deleted";
    session.subtype = "emoji";
    setupReaction(session, input.d);
  } else if (input.t === "GUILD_ROLE_CREATE") {
    session.type = "guild-role-added";
    session.guildId = input.d.guild_id;
    session.roleId = input.d.role.id;
    session.event.role = decodeRole(input.d.role);
  } else if (input.t === "GUILD_ROLE_UPDATE") {
    session.type = "guild-role-updated";
    session.guildId = input.d.guild_id;
    session.roleId = input.d.role.id;
    session.event.role = decodeRole(input.d.role);
  } else if (input.t === "GUILD_ROLE_DELETE") {
    session.type = "guild-role-added";
    session.guildId = input.d.guild_id;
    session.roleId = input.d.role_id;
  } else if (input.t === "INTERACTION_CREATE" && input.d.type === Interaction.Type.APPLICATION_COMMAND) {
    const data = input.d.data;
    const command = bot.commands.find((cmd) => cmd.name === data.name);
    if (!command)
      return;
    await bot.internal.createInteractionResponse(input.d.id, input.d.token, {
      type: Interaction.CallbackType.DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE
    });
    session.type = "interaction/command";
    session.isDirect = !input.d.guild_id;
    session.subtype = input.d.guild_id ? "group" : "private";
    session.channelId = input.d.channel_id;
    session.guildId = input.d.guild_id;
    session.userId = session.isDirect ? input.d.user.id : input.d.member.user.id;
    session.messageId = input.d.id;
    session.content = "";
    session.event.argv = decodeArgv(data, command);
  } else if (input.t === "INTERACTION_CREATE" && input.d.type === Interaction.Type.MODAL_SUBMIT) {
    const data = input.d.data;
    if (!data.custom_id.startsWith("input") && !data.custom_id.includes(":"))
      return;
    const user_input = data.components[0].components[0].value;
    await bot.internal.createInteractionResponse(input.d.id, input.d.token, {
      type: Interaction.CallbackType.DEFERRED_UPDATE_MESSAGE
    });
    session.type = "interaction/command";
    session.isDirect = !input.d.guild_id;
    session.subtype = input.d.guild_id ? "group" : "private";
    session.channelId = input.d.channel_id;
    session.guildId = input.d.guild_id;
    session.userId = session.isDirect ? input.d.user.id : input.d.member.user.id;
    session.messageId = input.d.id;
    session.content = user_input;
  } else if (input.t === "INTERACTION_CREATE" && input.d.type === Interaction.Type.MESSAGE_COMPONENT) {
    const id = input.d.data.custom_id;
    if (id.startsWith("input") && id.includes(":")) {
      await bot.internal.createInteractionResponse(input.d.id, input.d.token, {
        type: Interaction.CallbackType.MODAL,
        data: {
          custom_id: id,
          title: "Input",
          components: [{
            type: 1 /* ACTION_ROW */,
            components: [{
              custom_id: id,
              type: 4 /* TEXT_INPUT */,
              label: "Command",
              value: id.slice(id.indexOf(":") + 1),
              style: 1
            }]
          }]
        }
      });
    } else {
      await bot.internal.createInteractionResponse(input.d.id, input.d.token, {
        type: Interaction.CallbackType.DEFERRED_UPDATE_MESSAGE
      });
    }
    session.type = "interaction/button";
    session.isDirect = !input.d.guild_id;
    session.channelId = input.d.channel_id;
    session.guildId = input.d.guild_id;
    session.userId = session.isDirect ? input.d.user.id : input.d.member.user.id;
    session.messageId = input.d.id;
    session.content = "";
    session.event.button = {
      id
    };
  } else if (input.t === "CHANNEL_UPDATE") {
    session.type = "channel-updated";
    session.guildId = input.d.guild_id;
    session.subtype = input.d.guild_id ? "group" : "private";
    session.channelId = input.d.id;
  } else {
    return;
  }
  return session;
}
__name(adaptSession, "adaptSession");
var types = {
  text: ApplicationCommand2.OptionType.STRING,
  string: ApplicationCommand2.OptionType.STRING,
  boolean: ApplicationCommand2.OptionType.BOOLEAN,
  number: ApplicationCommand2.OptionType.NUMBER,
  integer: ApplicationCommand2.OptionType.INTEGER,
  posint: ApplicationCommand2.OptionType.INTEGER,
  user: ApplicationCommand2.OptionType.STRING,
  channel: ApplicationCommand2.OptionType.STRING,
  guild: ApplicationCommand2.OptionType.STRING
};
var trimDescription = /* @__PURE__ */ __name((source) => {
  if (!source || source.length < 96)
    return source;
  return source.slice(0, 93) + "...";
}, "trimDescription");
var encodeDescription = /* @__PURE__ */ __name((object) => ({
  description: trimDescription(object.description[""] || object.name),
  description_localizations: (0, import_satori2.valueMap)((0, import_satori2.pick)(object.description, Locale3), trimDescription)
}), "encodeDescription");
var encodeCommand = /* @__PURE__ */ __name((cmd) => ({
  ...encodeDescription(cmd),
  name: cmd.name,
  type: ApplicationCommand2.Type.CHAT_INPUT,
  options: encodeCommandOptions(cmd)
}), "encodeCommand");
var decodeArgv = /* @__PURE__ */ __name((data, command) => {
  const result = { name: data.name, arguments: [], options: {} };
  for (const argument of command.arguments) {
    const value = data.options?.find((opt) => opt.name === argument.name)?.value;
    if (value !== void 0)
      result.arguments.push(value);
  }
  for (const option of command.options) {
    const value = data.options?.find((opt) => opt.name === option.name)?.value;
    if (value !== void 0)
      result.options[option.name] = value;
  }
  return result;
}, "decodeArgv");
function encodeCommandOptions(cmd) {
  const result = [];
  if (cmd.children.length) {
    result.push(...cmd.children.map((child) => ({
      name: child.name.slice(cmd.name.length + 1),
      type: child.children.length ? ApplicationCommand2.OptionType.SUB_COMMAND_GROUP : ApplicationCommand2.OptionType.SUB_COMMAND,
      options: encodeCommandOptions(child),
      description: cmd.description[""] || child.name,
      description_localizations: (0, import_satori2.pick)(cmd.description, Locale3)
    })));
  } else {
    for (const arg of cmd.arguments) {
      result.push({
        ...encodeDescription(arg),
        name: arg.name.toLowerCase().replace(/[^a-z0-9]/g, ""),
        type: types[arg.type] ?? types.text,
        required: arg.required ?? false
      });
    }
    for (const option of cmd.options) {
      result.push({
        ...encodeDescription(option),
        name: option.name.toLowerCase(),
        type: types[option.type] ?? types.text,
        required: option.required ?? false,
        min_value: option.type === "posint" ? 1 : void 0
      });
    }
  }
  return result.sort((a, b) => +b.required - +a.required);
}
__name(encodeCommandOptions, "encodeCommandOptions");

// src/message.ts
var import_satori3 = require("@satorijs/satori");
var State = class {
  // forward: send the first message and create a thread
  constructor(type) {
    this.type = type;
  }
  static {
    __name(this, "State");
  }
  author = {};
  quote = {};
  channel = {};
  fakeMessageMap = {};
  // [userInput] = discord messages
  threadCreated = false;
};
var DiscordMessageEncoder = class extends import_satori3.MessageEncoder {
  static {
    __name(this, "DiscordMessageEncoder");
  }
  stack = [new State("message")];
  buffer = "";
  addition = {};
  figure = null;
  mode = "default";
  listType = null;
  rows = [];
  async getUrl() {
    const input = this.options?.session?.discord;
    if (input?.t === "INTERACTION_CREATE") {
      return `/webhooks/${input.d.application_id}/${input.d.token}`;
    } else if (this.stack[0].type === "forward" && this.stack[0].channel?.id) {
      if (this.stack[1].author.name || this.stack[1].author.avatar) {
        const webhook = await this.ensureWebhook();
        return `/webhooks/${webhook.id}/${webhook.token}?wait=true&thread_id=${this.stack[0].channel?.id}`;
      } else {
        return `/channels/${this.stack[0].channel.id}/messages`;
      }
    } else {
      if (this.stack[0].author.name || this.stack[0].author.avatar || this.stack[0].type === "forward" && !this.stack[0].threadCreated) {
        const webhook = await this.ensureWebhook();
        return `/webhooks/${webhook.id}/${webhook.token}?wait=true`;
      } else {
        return `/channels/${this.channelId}/messages`;
      }
    }
  }
  async post(data, headers) {
    try {
      const url = await this.getUrl();
      const result = await this.bot.http.post(url, data, { headers });
      const session = this.bot.session();
      const message = await decodeMessage(this.bot, result, session.event.message = {}, session.event);
      session.app.emit(session, "send", session);
      this.results.push(session.event.message);
      Object.defineProperty(session.event.message, "channel", {
        configurable: true,
        get: () => session.event.channel
      });
      if (this.stack[0].type === "forward" && !this.stack[0].threadCreated) {
        this.stack[0].threadCreated = true;
        const thread = await this.bot.internal.startThreadFromMessage(this.channelId, result.id, {
          name: "Forward",
          auto_archive_duration: 60
        });
        this.stack[0].channel = thread;
      }
      return message;
    } catch (e) {
      if (import_satori3.Quester.Error.is(e) && e.response) {
        if (e.response.data?.code === 10015) {
          this.bot.logger.debug("webhook has been deleted, recreating..., %o", e.response.data);
          if (!this.bot.webhookLock[this.channelId])
            this.bot.webhooks[this.channelId] = null;
          await this.ensureWebhook();
          return this.post(data, headers);
        } else {
          e = new Error(`[${e.response.status}] ${JSON.stringify(e.response.data)}`);
        }
      }
      this.errors.push(e);
    }
  }
  async sendEmbed(attrs, payload) {
    const { filename, data, mime } = await this.bot.ctx.http.file(attrs.src || attrs.url, attrs);
    const form = new FormData();
    const value = new Blob([data], { type: mime });
    form.append("files[0]", value, attrs.file || filename);
    form.append("payload_json", JSON.stringify(payload));
    return this.post(form);
  }
  async sendAsset(type, attrs, addition) {
    const { handleMixedContent, handleExternalAsset } = this.bot.config;
    if (handleMixedContent === "separate" && addition.content) {
      await this.post(addition);
      addition.content = "";
    }
    const sendDirect = /* @__PURE__ */ __name(async () => {
      if (addition.content) {
        await this.post(addition);
      }
      return this.post({ ...addition, content: attrs.src || attrs.url });
    }, "sendDirect");
    if (await this.bot.http.isLocal(attrs.src || attrs.url)) {
      return await this.sendEmbed(attrs, addition);
    }
    const mode = attrs.mode || handleExternalAsset;
    if (mode === "download" || handleMixedContent === "attach" && addition.content || type === "file") {
      return this.sendEmbed(attrs, addition);
    } else if (mode === "direct") {
      return sendDirect();
    }
    if (await this.checkMediaType(attrs.src || attrs.url, type)) {
      return sendDirect();
    } else {
      return this.sendEmbed(attrs, addition);
    }
  }
  checkMediaType(url, type) {
    if (url.startsWith("https://cdn.discordapp.com/"))
      return true;
    return this.bot.ctx.http.head(url, {
      headers: { accept: type + "/*" },
      timeout: 1e3
    }).then(
      (headers) => headers.get("content-type").startsWith(type),
      () => false
    );
  }
  async ensureWebhook() {
    return this.bot.ensureWebhook(this.channelId);
  }
  async flush() {
    const content = this.buffer.trim();
    this.trimButtons();
    if (!content && !this.rows.length)
      return;
    this.addition.components = this.rows;
    await this.post({ ...this.addition, content });
    this.buffer = "";
    this.addition = {};
    this.rows = [];
  }
  decodeButton(attrs, label) {
    let style = 1 /* PRIMARY */;
    if (attrs.class === "secondary")
      style = 2 /* SECONDARY */;
    if (attrs.class === "danger")
      style = 4 /* DANGER */;
    if (attrs.class === "success")
      style = 3 /* SUCCESS */;
    if (attrs.type === "link") {
      return {
        type: 2 /* BUTTON */,
        url: attrs.href,
        label: label || "Link",
        style: 5 /* LINK */
      };
    } else if (attrs.type === "input") {
      return {
        type: 2 /* BUTTON */,
        custom_id: `input${attrs.id}:${attrs.text ?? ""}`,
        label: label || "Input",
        style
      };
    } else {
      return {
        type: 2 /* BUTTON */,
        custom_id: attrs.id,
        label: label || "Button",
        style
      };
    }
  }
  lastRow() {
    if (!this.rows.length) {
      this.rows.push({
        type: 1 /* ACTION_ROW */,
        components: []
      });
    }
    let last = this.rows[this.rows.length - 1];
    if (last.components.length >= 5) {
      this.rows.push({
        type: 1 /* ACTION_ROW */,
        components: []
      });
      last = this.rows[this.rows.length - 1];
    }
    return last;
  }
  trimButtons() {
    if (this.rows.length && this.rows[this.rows.length - 1].components.length === 0)
      this.rows.pop();
  }
  async visit(element) {
    const { type, attrs, children } = element;
    if (type === "text") {
      this.buffer += sanitize(attrs.content);
    } else if (type === "b" || type === "strong") {
      this.buffer += "**";
      await this.render(children);
      this.buffer += "**";
    } else if (type === "i" || type === "em") {
      this.buffer += "*";
      await this.render(children);
      this.buffer += "*";
    } else if (type === "u" || type === "ins") {
      this.buffer += "__";
      await this.render(children);
      this.buffer += "__";
    } else if (type === "s" || type === "del") {
      this.buffer += "~~";
      await this.render(children);
      this.buffer += "~~";
    } else if (type === "spl") {
      this.buffer += "||";
      await this.render(children);
      this.buffer += "||";
    } else if (type === "code") {
      this.buffer += "`";
      await this.render(children);
      this.buffer += "`";
    } else if (type === "a") {
      this.buffer += "[";
      await this.render(children);
      this.buffer += "]";
      if (this.options.linkPreview) {
        this.buffer += `(${attrs.href})`;
      } else {
        this.buffer += `(<${attrs.href}>)`;
      }
    } else if (type === "br") {
      this.buffer += "\n";
    } else if (type === "p") {
      if (!this.buffer.endsWith("\n"))
        this.buffer += "\n";
      await this.render(children);
      if (!this.buffer.endsWith("\n"))
        this.buffer += "\n";
    } else if (type === "blockquote") {
      if (!this.buffer.endsWith("\n"))
        this.buffer += "\n";
      this.buffer += "> ";
      await this.render(children);
      this.buffer += "\n";
    } else if (type === "ul" || type === "ol") {
      this.listType = type;
      await this.render(children);
      this.listType = null;
    } else if (type === "li") {
      if (!this.buffer.endsWith("\n"))
        this.buffer += "\n";
      if (this.listType === "ol") {
        this.buffer += "0. ";
      } else if (this.listType === "ul") {
        this.buffer += "- ";
      }
      this.render(children);
      this.buffer += "\n";
    } else if (type === "at") {
      if (attrs.id) {
        this.buffer += `<@${attrs.id}>`;
      } else if (attrs.type === "all") {
        this.buffer += `@everyone`;
      } else if (attrs.type === "here") {
        this.buffer += `@here`;
      }
    } else if (type === "sharp" && attrs.id) {
      this.buffer += `<#${attrs.id}>`;
    } else if (type === "face") {
      if (attrs.platform && attrs.platform !== this.bot.platform) {
        return this.render(children);
      } else {
        this.buffer += `<${attrs.animated ? "a" : ""}:${attrs.name}:${attrs.id}>`;
      }
    } else if ((type === "img" || type === "image" || type === "video") && (attrs.src || attrs.url)) {
      if (this.mode === "figure") {
        this.figure = element;
      } else {
        await this.sendAsset(type, attrs, {
          ...this.addition,
          content: this.buffer.trim()
        });
        this.buffer = "";
      }
    } else if (type === "share") {
      await this.flush();
      await this.post({
        ...this.addition,
        embeds: [{ ...attrs }]
      });
    } else if (type === "audio") {
      await this.sendAsset("file", attrs, {
        ...this.addition,
        content: "",
        attachments: [
          {
            waveform: "",
            // base64 encoded bytearray representing a sampled waveform
            id: 0,
            duration_secs: attrs.duration ?? 0
          }
        ],
        flags: Message2.Flag.IS_VOICE_MESSAGE
      });
      this.buffer = "";
    } else if (type === "author") {
      const { avatar, name } = attrs;
      if (avatar)
        this.addition.avatar_url = avatar;
      if (name)
        this.addition.username = name;
      if (this.stack[0].type === "message") {
        this.stack[0].author = attrs;
      }
      if (this.stack[0].type === "forward") {
        this.stack[1].author = attrs;
      }
    } else if (type === "quote") {
      await this.flush();
      const parse = /* @__PURE__ */ __name((val) => val.replace(/\\([\\*_`~|()\[\]])/g, "$1"), "parse");
      const message = this.stack[this.stack[0].type === "forward" ? 1 : 0];
      if (!message.author.avatar && !message.author.name && this.stack[0].type !== "forward") {
        await this.flush();
        this.addition.message_reference = {
          message_id: attrs.id
        };
      } else {
        let replyId = attrs.id, guildId = this.session.guildId, channelId = this.channelId;
        if (this.stack[0].type === "forward" && this.stack[0].fakeMessageMap[attrs.id]?.length >= 1) {
          replyId = this.stack[0].fakeMessageMap[attrs.id][0].id;
          channelId = this.stack[0].fakeMessageMap[attrs.id][0].channel.id;
        }
        const quote = await this.bot.getMessage(channelId, replyId);
        if (!guildId) {
          const c = await this.bot.internal.getChannel(channelId);
          if (c.guild_id)
            guildId = c.guild_id;
        }
        if (!guildId) {
          this.bot.logger.warn("skip <quote> due to missing guild id");
          return;
        }
        this.addition.embeds = [{
          description: [
            sanitize(parse(quote.elements.filter((v) => v.type === "text").join("")).slice(0, 30)),
            `<t:${Math.ceil(quote.timestamp / 1e3)}:R> [[ ↑ ]](https://discord.com/channels/${guildId}/${channelId}/${replyId})`
          ].join("\n\n"),
          author: {
            name: quote.user.name,
            icon_url: quote.user.avatar
          }
        }];
      }
    } else if (type === "figure") {
      await this.flush();
      this.mode = "figure";
      await this.render(children);
      await this.sendAsset(this.figure.type, this.figure.attrs, {
        ...this.addition,
        content: this.buffer.trim()
      });
      this.buffer = "";
      this.mode = "default";
    } else if (type === "message" && !attrs.forward) {
      if (this.mode === "figure") {
        await this.render(children);
        this.buffer += "\n";
      } else {
        const resultLength = +this.results.length;
        await this.flush();
        await this.render(children);
        await this.flush();
        const newLength = +this.results.length;
        const sentMessages = this.results.slice(resultLength, newLength);
        if (this.stack[0].type === "forward" && attrs.id) {
          this.stack[0].fakeMessageMap[attrs.id] = sentMessages;
        }
        if (this.stack[0].type === "message") {
          this.stack[0].author = {};
        }
        if (this.stack[0].type === "forward") {
          this.stack[1].author = {};
        }
      }
    } else if (type === "button") {
      const last = this.lastRow();
      last.components.push(this.decodeButton(
        attrs,
        children.join("")
      ));
    } else if (type === "button-group") {
      if (this.rows.length && this.rows[this.rows.length - 1].components.length) {
        this.rows.push({
          type: 1 /* ACTION_ROW */,
          components: []
        });
      }
      await this.render(children);
      this.rows.push({
        type: 1 /* ACTION_ROW */,
        components: []
      });
    } else if (type === "message" && attrs.forward) {
      this.stack.unshift(new State("forward"));
      await this.render(children);
      await this.flush();
      await this.bot.internal.modifyChannel(this.stack[0].channel.id, {
        archived: true,
        locked: true
      });
      this.stack.shift();
    } else {
      await this.render(children);
    }
  }
};
((DiscordMessageEncoder2) => {
  DiscordMessageEncoder2.Config = import_satori3.Schema.object({
    handleExternalAsset: import_satori3.Schema.union([
      import_satori3.Schema.const("download").description("先下载后发送"),
      import_satori3.Schema.const("direct").description("直接发送链接"),
      import_satori3.Schema.const("auto").description("发送一个 HEAD 请求，根据返回的 Content-Type 决定发送方式")
    ]).role("radio").description("发送外链资源时采用的方式。").default("auto"),
    handleMixedContent: import_satori3.Schema.union([
      import_satori3.Schema.const("separate").description("将每个不同形式的内容分开发送"),
      import_satori3.Schema.const("attach").description("图片前如果有文本内容，则将文本作为图片的附带信息进行发送"),
      import_satori3.Schema.const("auto").description("如果图片本身采用直接发送则与前面的文本分开，否则将文本作为图片的附带信息发送")
    ]).role("radio").description("发送图文等混合内容时采用的方式。").default("auto")
  }).description("发送设置");
})(DiscordMessageEncoder || (DiscordMessageEncoder = {}));

// src/ws.ts
var import_satori4 = require("@satorijs/satori");
var WsClient = class extends import_satori4.Adapter.WsClient {
  static {
    __name(this, "WsClient");
  }
  _d = 0;
  _ping;
  _sessionId = "";
  _resumeUrl;
  async prepare() {
    if (this._resumeUrl) {
      return this.bot.http.ws(this._resumeUrl + "/?v=10&encoding=json");
    }
    const { url } = await this.bot.internal.getGatewayBot();
    return this.bot.http.ws(url + "/?v=10&encoding=json");
  }
  heartbeat() {
    this.bot.logger.debug(`heartbeat d ${this._d}`);
    this.socket.send(JSON.stringify({
      op: Gateway.Opcode.HEARTBEAT,
      d: this._d
    }));
  }
  accept() {
    this.socket.addEventListener("message", async ({ data }) => {
      let parsed;
      data = data.toString();
      try {
        parsed = JSON.parse(data);
      } catch (error) {
        return this.bot.logger.warn("cannot parse message", data);
      }
      this.bot.logger.debug(parsed);
      if (parsed.s) {
        this._d = parsed.s;
      }
      if (parsed.op === Gateway.Opcode.HELLO) {
        this._ping = setInterval(() => this.heartbeat(), parsed.d.heartbeat_interval);
        if (this._sessionId) {
          this.bot.logger.debug("resuming");
          this.socket.send(JSON.stringify({
            op: Gateway.Opcode.RESUME,
            d: {
              token: this.bot.config.token,
              session_id: this._sessionId,
              seq: this._d
            }
          }));
        } else {
          this.socket.send(JSON.stringify({
            op: Gateway.Opcode.IDENTIFY,
            d: {
              token: this.bot.config.token,
              properties: {},
              compress: false,
              intents: this.bot.config.intents
            }
          }));
        }
      }
      if (parsed.op === Gateway.Opcode.INVALID_SESSION) {
        if (parsed.d)
          return;
        this._sessionId = "";
        this.bot.logger.warn("offline: invalid session");
        this.socket?.close();
      }
      if (parsed.op === Gateway.Opcode.DISPATCH) {
        this.bot.dispatch(this.bot.session({
          type: "internal",
          _type: "discord/" + parsed.t.toLowerCase().replace(/_/g, "-"),
          _data: parsed.d
        }));
        if (parsed.t === "READY") {
          this._sessionId = parsed.d.session_id;
          this._resumeUrl = parsed.d.resume_gateway_url;
          this.bot.user = decodeUser(parsed.d.user);
          this.bot.logger.debug("session_id " + this._sessionId);
          return this.bot.online();
        }
        if (parsed.t === "RESUMED") {
          return this.bot.online();
        }
        const session = await adaptSession(this.bot, parsed);
        if (session)
          this.bot.dispatch(session);
      }
      if (parsed.op === Gateway.Opcode.RECONNECT) {
        this.bot.logger.warn("offline: discord request reconnect");
        this.socket?.close();
      }
    });
    this.socket.addEventListener("close", () => {
      clearInterval(this._ping);
    });
  }
};
((WsClient2) => {
  WsClient2.Options = import_satori4.Schema.intersect([
    import_satori4.Schema.object({
      intents: import_satori4.Schema.bitset(Gateway.Intent).description("需要订阅的机器人事件。").default(0 | Gateway.Intent.GUILD_MESSAGES | Gateway.Intent.GUILD_MESSAGE_REACTIONS | Gateway.Intent.DIRECT_MESSAGES | Gateway.Intent.DIRECT_MESSAGE_REACTIONS | Gateway.Intent.MESSAGE_CONTENT)
    }).description("推送设置"),
    import_satori4.Adapter.WsClientConfig
  ]);
})(WsClient || (WsClient = {}));

// src/bot.ts
var import_package = require("../package.json");
var DiscordBot = class extends import_satori5.Bot {
  static {
    __name(this, "DiscordBot");
  }
  static MessageEncoder = DiscordMessageEncoder;
  static inject = ["http"];
  http;
  internal;
  webhooks = {};
  webhookLock = {};
  commands = [];
  constructor(ctx, config) {
    super(ctx, config, "discord");
    this.http = ctx.http.extend({
      ...config,
      headers: {
        Authorization: `Bot ${config.token}`,
        "User-Agent": `Koishi (https://koishi.chat/, ${import_package.version})`,
        ...config.headers
      }
    });
    this.internal = new Internal(this);
    ctx.plugin(WsClient, this);
  }
  async _ensureWebhook(channelId) {
    let webhook;
    const webhooks = await this.internal.getChannelWebhooks(channelId);
    const selfId = this.selfId;
    if (!webhooks.find((v) => v.name === "Koishi" && v.user.id === selfId)) {
      webhook = await this.internal.createWebhook(channelId, {
        name: "Koishi"
      });
    } else {
      webhook = webhooks.find((v) => v.name === "Koishi" && v.user.id === this.selfId);
    }
    return this.webhooks[channelId] = webhook;
  }
  async ensureWebhook(channelId) {
    if (this.webhooks[channelId] === null) {
      delete this.webhooks[channelId];
      delete this.webhookLock[channelId];
    }
    if (this.webhooks[channelId]) {
      delete this.webhookLock[channelId];
      return this.webhooks[channelId];
    }
    return this.webhookLock[channelId] ||= this._ensureWebhook(channelId);
  }
  async getLogin() {
    const data = await this.internal.getCurrentUser();
    this.user = decodeUser(data);
    return this.toJSON();
  }
  async deleteMessage(channelId, messageId) {
    await this.internal.deleteMessage(channelId, messageId);
  }
  async editMessage(channelId, messageId, content) {
    const elements = import_satori5.h.normalize(content);
    content = elements.toString();
    const image = elements.find((v) => v.type === "img" || v.type === "image");
    if (image) {
      throw new Error("You can't include embed object(s) while editing message.");
    }
    await this.internal.editMessage(channelId, messageId, {
      content
    });
  }
  async getMessage(channelId, messageId, recursive = true) {
    const data = await this.internal.getChannelMessage(channelId, messageId);
    return await decodeMessage(this, data, {}, void 0, recursive);
  }
  async getMessageList(channelId, before) {
    const messages = await this.internal.getChannelMessages(channelId, { before, limit: 100 });
    const data = await Promise.all(messages.reverse().map((data2) => decodeMessage(this, data2, {}, void 0, false)));
    return { data, next: data[0]?.id };
  }
  async getUser(userId) {
    const data = await this.internal.getUser(userId);
    return decodeUser(data);
  }
  async getGuildMemberList(guildId, after) {
    const users = await this.internal.listGuildMembers(guildId, { after, limit: 1e3 });
    const data = users.map((v) => decodeGuildMember(v));
    return { data, next: data[999]?.user.id };
  }
  async getChannel(channelId) {
    const data = await this.internal.getChannel(channelId);
    return decodeChannel(data);
  }
  async getGuildMember(guildId, userId) {
    const member = await this.internal.getGuildMember(guildId, userId);
    return decodeGuildMember(member);
  }
  async kickGuildMember(guildId, userId) {
    return this.internal.removeGuildMember(guildId, userId);
  }
  async getGuild(guildId) {
    const data = await this.internal.getGuild(guildId);
    return decodeGuild(data);
  }
  async getGuildList(after) {
    const guilds = await this.internal.getCurrentUserGuilds({ after, limit: 200 });
    const data = guilds.map(decodeGuild);
    return { data, next: data[199]?.id };
  }
  async getChannelList(guildId) {
    const channels = await this.internal.getGuildChannels(guildId);
    return { data: channels.map(decodeChannel) };
  }
  createReaction(channelId, messageId, emoji) {
    return this.internal.createReaction(channelId, messageId, emoji);
  }
  deleteReaction(channelId, messageId, emoji, userId) {
    if (!userId) {
      return this.internal.deleteOwnReaction(channelId, messageId, emoji);
    } else {
      return this.internal.deleteUserReaction(channelId, messageId, emoji, userId);
    }
  }
  clearReaction(channelId, messageId, emoji) {
    if (!emoji) {
      return this.internal.deleteAllReactions(channelId, messageId);
    } else {
      return this.internal.deleteAllReactionsForEmoji(channelId, messageId, emoji);
    }
  }
  async getReactionList(channelId, messageId, emoji, after) {
    const data = await this.internal.getReactions(channelId, messageId, emoji, { after, limit: 100 });
    return { data: data.map(decodeUser), next: data[99]?.id };
  }
  setGuildMemberRole(guildId, userId, roleId) {
    return this.internal.addGuildMemberRole(guildId, userId, roleId);
  }
  unsetGuildMemberRole(guildId, userId, roleId) {
    return this.internal.removeGuildMemberRole(guildId, userId, roleId);
  }
  async getGuildRoleList(guildId) {
    const data = await this.internal.getGuildRoles(guildId);
    return { data: data.map(decodeRole) };
  }
  async createGuildRole(guildId, data) {
    const role = await this.internal.createGuildRole(guildId, encodeRole(data));
    return decodeRole(role);
  }
  async updateGuildRole(guildId, roleId, data) {
    await this.internal.modifyGuildRole(guildId, roleId, encodeRole(data));
  }
  deleteGuildRole(guildId, roleId) {
    return this.internal.deleteGuildRole(guildId, roleId);
  }
  async createDirectChannel(userId) {
    const channel = await this.internal.createDM({ recipient_id: userId });
    return decodeChannel(channel);
  }
  async updateCommands(commands) {
    if (!this.config.slash)
      return;
    this.commands = commands;
    const updates = commands.map(encodeCommand);
    if (updates.length) {
      this.logger.debug("update %d command(s)", updates.length);
      await this.internal.bulkOverwriteGlobalApplicationCommands(this.selfId, updates);
    }
  }
};
((DiscordBot2) => {
  DiscordBot2.Config = import_satori5.Schema.intersect([
    import_satori5.Schema.object({
      token: import_satori5.Schema.string().description("机器人的用户令牌。").role("secret").required()
    }),
    import_satori5.Schema.object({
      slash: import_satori5.Schema.boolean().description("是否启用斜线指令。").default(true)
    }).description("功能设置"),
    WsClient.Options,
    DiscordMessageEncoder.Config,
    import_satori5.Quester.createConfig("https://discord.com/api/v10")
  ]);
})(DiscordBot || (DiscordBot = {}));

// src/index.ts
var src_default = DiscordBot;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Discord,
  DiscordBot,
  DiscordMessageEncoder,
  WsClient
});
//# sourceMappingURL=index.js.map
