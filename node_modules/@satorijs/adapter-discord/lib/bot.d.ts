import { Bot, Context, Fragment, HTTP, Schema, Universal } from '@satorijs/core';
import * as Discord from './utils';
import { DiscordMessageEncoder } from './message';
import { Internal, Webhook } from './types';
import { WsClient } from './ws';
export declare class DiscordBot<C extends Context = Context> extends Bot<C, DiscordBot.Config> {
    static MessageEncoder: typeof DiscordMessageEncoder;
    static inject: string[];
    http: HTTP;
    internal: Internal;
    webhooks: Record<string, Webhook>;
    webhookLock: Record<string, Promise<Webhook>>;
    commands: Universal.Command[];
    constructor(ctx: C, config: DiscordBot.Config);
    private _ensureWebhook;
    ensureWebhook(channelId: string): Promise<Discord.Webhook>;
    getLogin(): Promise<Universal.Login>;
    deleteMessage(channelId: string, messageId: string): Promise<void>;
    editMessage(channelId: string, messageId: string, content: Fragment): Promise<void>;
    _getMessage(channelId: string, messageId: string): Promise<Discord.Message>;
    getMessage(channelId: string, messageId: string, recursive?: boolean): Promise<Universal.Message>;
    getMessageList(channelId: string, messageId?: string, direction?: Universal.Direction, limit?: number, order?: Universal.Order): Promise<{
        data: Universal.Message[];
        prev: string;
        next: string;
    }>;
    getUser(userId: string): Promise<Universal.User>;
    getGuildMemberList(guildId: string, after?: string): Promise<{
        data: Universal.GuildMember[];
        next: string;
    }>;
    getChannel(channelId: string): Promise<Universal.Channel>;
    getGuildMember(guildId: string, userId: string): Promise<Universal.GuildMember>;
    kickGuildMember(guildId: string, userId: string): Promise<void>;
    getGuild(guildId: string): Promise<Universal.Guild>;
    getGuildList(after?: string): Promise<{
        data: Universal.Guild[];
        next: string;
    }>;
    getChannelList(guildId: string): Promise<{
        data: Universal.Channel[];
    }>;
    createReaction(channelId: string, messageId: string, emoji: string): Promise<void>;
    deleteReaction(channelId: string, messageId: string, emoji: string, userId?: string): Promise<void>;
    clearReaction(channelId: string, messageId: string, emoji?: string): Promise<void>;
    getReactionList(channelId: string, messageId: string, emoji: string, after?: string): Promise<{
        data: Universal.User[];
        next: string;
    }>;
    setGuildMemberRole(guildId: string, userId: string, roleId: string): Promise<void>;
    unsetGuildMemberRole(guildId: string, userId: string, roleId: string): Promise<void>;
    getGuildRoleList(guildId: string): Promise<{
        data: Universal.GuildRole[];
    }>;
    createGuildRole(guildId: string, data: Partial<Universal.GuildRole>): Promise<Universal.GuildRole>;
    updateGuildRole(guildId: string, roleId: string, data: Partial<Universal.GuildRole>): Promise<void>;
    deleteGuildRole(guildId: string, roleId: string): Promise<void>;
    createDirectChannel(userId: string): Promise<Universal.Channel>;
    updateCommands(commands: Universal.Command[]): Promise<void>;
}
export declare namespace DiscordBot {
    interface Config extends HTTP.Config, DiscordMessageEncoder.Config, WsClient.Options {
        type: 'bot' | 'user';
        token: string;
        slash?: boolean;
    }
    const Config: Schema<Config>;
}
