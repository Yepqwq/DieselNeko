import { Bot, Context, Fragment, HTTP, Schema, Universal } from '@satorijs/core';
import * as Kook from './types';
import { WsClient } from './ws';
import { HttpServer } from './http';
import { KookMessageEncoder } from './message';
export declare class KookBot<C extends Context = Context, T extends KookBot.Config = KookBot.Config> extends Bot<C, T> {
    static MessageEncoder: typeof KookMessageEncoder;
    static inject: string[];
    http: HTTP;
    internal: Kook.Internal;
    constructor(ctx: C, config: T);
    request<T = any>(method: HTTP.Method, path: string, data?: {}, headers?: any): Promise<T>;
    deleteMessage(channelId: string, msg_id: string): Promise<void>;
    editMessage(channelId: string, msg_id: string, content: Fragment): Promise<void>;
    getMessage(channelId: string, msg_id: string): Promise<Universal.Message>;
    $createReaction(channelId: string, msg_id: string, emoji: string): Promise<void>;
    $deleteReaction(channelId: string, messageId: string, emoji: string, user_id?: string): Promise<void>;
    getLogin(): Promise<Universal.Login>;
    getGuildList(): Promise<{
        data: Universal.Guild[];
    }>;
    getGuildMemberList(guild_id: string): Promise<{
        data: Universal.GuildMember[];
    }>;
    setGroupNickname(guild_id: string, user_id: string, nickname: string): Promise<void>;
    leaveGroup(guild_id: string): Promise<void>;
    kickGroup(guild_id: string, user_id: string): Promise<void>;
    createDirectChannel(userId: string): Promise<{
        id: any;
        type: Universal.Channel.Type;
    }>;
    createReaction(channelId: string, messageId: string, emoji: string): Promise<void>;
    deleteReaction(channelId: string, messageId: string, emoji: string, userId?: string): Promise<void>;
    getReactionList(channelId: string, messageId: string, emoji: string): Promise<{
        data: Universal.User[];
    }>;
    setGuildMemberRole(guildId: string, userId: string, roleId: string): Promise<void>;
    unsetGuildMemberRole(guildId: string, userId: string, roleId: string): Promise<void>;
    getGuildRoles(guildId: string): Promise<{
        data: Universal.GuildRole[];
    }>;
    createGuildRole(guildId: string, data: Partial<Universal.GuildRole>): Promise<Universal.GuildRole>;
    updateGuildRole(guildId: string, roleId: string, data: Partial<Universal.GuildRole>): Promise<void>;
    deleteGuildRole(guildId: string, roleId: string): Promise<void>;
}
export declare namespace KookBot {
    interface BaseConfig extends HTTP.Config, KookMessageEncoder.Config {
    }
    type Config = BaseConfig & (HttpServer.Options | WsClient.Options);
    const Config: Schema<Config>;
}
