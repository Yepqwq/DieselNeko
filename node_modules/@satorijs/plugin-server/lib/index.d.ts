import { Context, Schema, Service } from '@satorijs/core';
declare module 'cordis' {
    interface Context {
        'satori.server': SatoriServer;
    }
}
declare module '@satorijs/core' {
    interface Satori {
        server: SatoriServer;
    }
}
declare class SatoriServer extends Service<SatoriServer.Config> {
    config: SatoriServer.Config;
    static inject: string[];
    constructor(ctx: Context, config: SatoriServer.Config);
    get url(): string;
}
declare namespace SatoriServer {
    interface ApiConfig {
        enabled?: boolean;
    }
    interface WebSocketConfig {
        enabled?: boolean;
        resumeTimeout?: number;
    }
    interface Webhook {
        enabled?: boolean;
        endpoint: string;
        token?: string;
    }
    const Webhook: Schema<Webhook>;
    interface Config {
        path: string;
        token?: string;
        api?: ApiConfig;
        websocket?: WebSocketConfig;
        webhooks: Webhook[];
    }
    const Config: Schema<Config>;
}
export default SatoriServer;
