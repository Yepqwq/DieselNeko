import { Bot, Context, HTTP, Schema, Universal } from '@satorijs/core';
import { WsClient } from '../ws';
import * as QQ from '../types';
import { QQGuildBot } from './guild';
import { QQMessageEncoder } from '../message';
import { GroupInternal } from '../internal';
export declare class QQBot<C extends Context = Context> extends Bot<C, QQBot.Config> {
    static MessageEncoder: typeof QQMessageEncoder;
    static inject: string[];
    guildBot: QQGuildBot<C>;
    internal: GroupInternal;
    http: HTTP;
    guildHttp: HTTP;
    private _token;
    private _timer;
    constructor(ctx: C, config: QQBot.Config);
    initialize(): Promise<void>;
    stop(): Promise<void>;
    _ensureAccessToken(): Promise<void>;
    getAccessToken(): Promise<string>;
    getLogin(): Promise<Universal.Login>;
    createDirectChannel(id: string): Promise<{
        id: string;
        type: Universal.Channel.Type;
    }>;
    deleteMessage(channelId: string, messageId: string): Promise<void>;
}
export declare namespace QQBot {
    interface Config extends QQ.Options, WsClient.Options {
        intents?: number;
        retryWhen: number[];
    }
    const Config: Schema<Config>;
}
