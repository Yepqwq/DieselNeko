import { Bot, Context, HTTP, Universal } from '@satorijs/core';
import { QQBot } from '.';
import { GuildInternal } from '../internal';
import { QQGuildMessageEncoder } from '../message';
export declare namespace QQGuildBot {
    interface Config {
        parent: QQBot;
    }
}
export declare class QQGuildBot<C extends Context = Context> extends Bot<C> {
    parent: QQBot;
    hidden: boolean;
    internal: GuildInternal;
    http: HTTP;
    static MessageEncoder: typeof QQGuildMessageEncoder;
    constructor(ctx: C, config: QQGuildBot.Config);
    get status(): Universal.Status;
    set status(status: Universal.Status);
    getUser(userId: string, guildId?: string): Promise<Universal.User>;
    getGuildList(next?: string): Promise<{
        data: Universal.Guild[];
    }>;
    getGuild(guildId: string): Promise<Universal.Guild>;
    getChannelList(guildId: string, next?: string): Promise<Universal.List<Universal.Channel>>;
    getChannel(channelId: string): Promise<Universal.Channel>;
    getGuildMemberList(guildId: string, next?: string): Promise<Universal.List<Universal.GuildMember>>;
    getGuildMember(guildId: string, userId: string): Promise<Universal.GuildMember>;
    kickGuildMember(guildId: string, userId: string): Promise<void>;
    muteGuildMember(guildId: string, userId: string, duration: number): Promise<void>;
    getReactionList(channelId: string, messageId: string, emoji: string, next?: string): Promise<Universal.List<Universal.User>>;
    createReaction(channelId: string, messageId: string, emoji: string): Promise<void>;
    deleteReaction(channelId: string, messageId: string, emoji: string): Promise<void>;
    getMessage(channelId: string, messageId: string): Promise<Universal.Message>;
    deleteMessage(channelId: string, messageId: string): Promise<void>;
    getLogin(): Promise<Universal.Login>;
    createDirectChannel(id: string, guild_id?: string): Promise<{
        id: string;
        type: Universal.Channel.Type;
    }>;
}
