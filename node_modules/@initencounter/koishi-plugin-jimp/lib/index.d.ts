import { Context, Schema } from 'koishi';
import Jimpp from 'jimp';
import Jm from '@initencounter/jimp';
export declare const name = "jimp";
declare class Jimp extends Jm {
    constructor(ctx: Context);
    /**
     * 实例化 Jimp
     * @param args
     * @returns Jimp
     */
    newJimp(...args: any[]): Jimpp;
    /**
     * 读取图片
     * @param path 路径
     */
    read(path: string, cb?: (err: Error | null, img?: Jimpp) => void): Promise<Jimpp>;
    read(data: Buffer, cb?: (err: Error | null, img?: Jimpp) => void): Promise<Jimpp>;
    read(image: Jimp, cb?: (err: Error | null, img?: Jimpp) => void): Promise<Jimpp>;
    read(width: number, height: number, background: number, cb?: (err: Error | null, img?: Jimpp) => void): Promise<Jimpp>;
    /**
     * 调整图片大小
     * @param Jimpp
     * @param w
     * @param h
     * @param cb
     * @returns
     */
    resize(Jimpp: Jimpp, w: number, h: number, cb?: (err: any, img: Jimpp) => void): Jimpp;
    /**
     * 裁剪图片
     * @param Jimpp
     */
    crop(Jimpp: Jimpp, x: number, y: number, w: number, h: number, cb?: (err: any, img: Jimpp) => void): Jimpp;
    /**
     * 旋转图片
     * @param Jimpp
     * @param deg
     * @param callback
     * @returns
     */
    rotate(Jimpp: Jimpp, deg: number, cb?: (err: any, img: Jimpp) => void): Jimpp;
    /**
     *
     * @param Jimpp Jimp对象
     * @param path 保存的路径
     * @returns
     */
    writeAsync(Jimpp: Jimpp, path: string): Promise<Jimpp>;
    /**
     *
     * @param file 要加载的字体路径
     * @returns
     */
    loadFont(file: string): Promise<Font>;
    /**
     *
     * @param r red
     * @param g green
     * @param b blue
     * @param a alpha
     * @param cb callback function
     */
    rgbaToInt(r: number, g: number, b: number, a: number): number;
    appendConstructorOption(name: string, test: (...args: any[]) => boolean, run: (this: Jimpp, resolve: (jimp?: Jimpp) => any, reject: (reason: Error) => any, ...args: any[]) => any): void;
    /**
     *
     * @param font
     * @param text
     * @param maxWidth
     * @returns
     */
    /**
     *
     * @param font 字体
     * @param text 文本
     * @param maxWidth 宽带
     * @returns
     */
    measureTextHeight(font: Font, text: any, maxWidth: number): number;
    /**
     *
     * @param font 字体
     * @param text 文本
     * @returns
     */
    measureText(font: Font, text: any): number;
    /**
     *
     * @param n
     * @returns
     */
    limit255(n: number): number;
    /**
     *
     * @param i 要转为RGBA的数字
     * @returns
     */
    intToRGBA(i: number): RGBA;
    /**
     *
     * @param img1 图片1
     * @param img2
     * @returns
     */
    distance(img1: Jimpp, img2: Jimpp): number;
    /**
     *
     * @param img1 图片1
     * @param img2
     * @param threshold 相似度，阈值
     * @returns
     */
    diff(img1: Jimpp, img2: Jimpp, threshold?: number): DiffReturn<Jimpp>;
    /**
     *
     * @param cssColor css格式颜色
     * @returns
     */
    cssColorToHex(cssColor: string): number;
    /**
     *
     * @param path 路径
     * @returns
     */
    create(path: string): Promise<Jimpp>;
    /**
     *
     * @param hash1
     * @param hash2
     * @returns
     */
    compareHashes(hash1: string, hash2: string): number;
    /**
     *
     * @param rgba1
     * @param rgba2
     * @returns
     */
    colorDiff(rgba1: RGB, rgba2: RGB): number;
}
declare namespace Jimp {
    const usage: string;
    interface Config {
    }
    const Config: Schema<Config>;
}
export default Jimp;
export interface Font {
    chars: {
        [char: string]: FontChar;
    };
    kernings: {
        [firstString: string]: {
            [secondString: string]: number;
        };
    };
    pages: string[];
    common: FontCommon;
    info: FontInfo;
}
export interface FontChar {
    id: number;
    x: number;
    y: number;
    width: number;
    height: number;
    xoffset: number;
    yoffset: number;
    xadvance: number;
    page: number;
    chnl: number;
}
export interface FontInfo {
    face: string;
    size: number;
    bold: number;
    italic: number;
    charset: string;
    unicode: number;
    stretchH: number;
    smooth: number;
    aa: number;
    padding: [number, number, number, number];
    spacing: [number, number];
}
export interface FontCommon {
    lineHeight: number;
    base: number;
    scaleW: number;
    scaleH: number;
    pages: number;
    packed: number;
    alphaChnl: number;
    redChnl: number;
    greenChnl: number;
    blueChnl: number;
}
export interface RGBA {
    r: number;
    g: number;
    b: number;
    a: number;
}
interface DiffReturn<This> {
    percent: number;
    image: This;
}
export interface RGB {
    r: number;
    g: number;
    b: number;
}
