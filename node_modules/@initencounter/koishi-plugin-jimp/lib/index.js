var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default,
  name: () => name
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_jimp = __toESM(require("jimp"));
var import_jimp2 = __toESM(require("@initencounter/jimp"));
var import_path = require("path");
var import_fs = require("fs");
var name = "jimp";
var Jimp = class extends import_jimp2.default {
  static {
    __name(this, "Jimp");
  }
  constructor(ctx) {
    super(ctx);
    this.FONT_SANS_8_BLACK = import_jimp.default.FONT_SANS_8_BLACK;
    this.FONT_SANS_10_BLACK = import_jimp.default.FONT_SANS_10_BLACK;
    this.FONT_SANS_12_BLACK = import_jimp.default.FONT_SANS_12_BLACK;
    this.FONT_SANS_14_BLACK = import_jimp.default.FONT_SANS_14_BLACK;
    this.FONT_SANS_16_BLACK = import_jimp.default.FONT_SANS_16_BLACK;
    this.FONT_SANS_32_BLACK = import_jimp.default.FONT_SANS_32_BLACK;
    this.FONT_SANS_128_BLACK = import_jimp.default.FONT_SANS_128_BLACK;
    this.FONT_SANS_8_WHITE = import_jimp.default.FONT_SANS_8_WHITE;
    this.FONT_SANS_16_WHITE = import_jimp.default.FONT_SANS_16_WHITE;
    this.FONT_SANS_32_WHITE = import_jimp.default.FONT_SANS_32_WHITE;
    this.FONT_SANS_64_WHITE = import_jimp.default.FONT_SANS_64_WHITE;
    this.FONT_SANS_128_WHITE = import_jimp.default.FONT_SANS_128_WHITE;
    this.AUTO = import_jimp.default.AUTO;
    this.BLEND_SOURCE_OVER = import_jimp.default.BLEND_SOURCE_OVER;
    this.BLEND_DESTINATION_OVER = import_jimp.default.BLEND_DESTINATION_OVER;
    this.BLEND_MULTIPLY = import_jimp.default.BLEND_MULTIPLY;
    this.BLEND_ADD = import_jimp.default.BLEND_ADD;
    this.BLEND_SCREEN = import_jimp.default.BLEND_SCREEN;
    this.BLEND_OVERLAY = import_jimp.default.BLEND_OVERLAY;
    this.BLEND_DARKEN = import_jimp.default.BLEND_DARKEN;
    this.BLEND_LIGHTEN = import_jimp.default.BLEND_LIGHTEN;
    this.BLEND_HARDLIGHT = import_jimp.default.BLEND_HARDLIGHT;
    this.BLEND_DIFFERENCE = import_jimp.default.BLEND_DIFFERENCE;
    this.BLEND_EXCLUSION = import_jimp.default.BLEND_EXCLUSION;
    this.HORIZONTAL_ALIGN_LEFT = import_jimp.default.HORIZONTAL_ALIGN_LEFT;
    this.HORIZONTAL_ALIGN_CENTER = import_jimp.default.HORIZONTAL_ALIGN_CENTER;
    this.HORIZONTAL_ALIGN_RIGHT = import_jimp.default.HORIZONTAL_ALIGN_RIGHT;
    this.VERTICAL_ALIGN_TOP = import_jimp.default.VERTICAL_ALIGN_TOP;
    this.VERTICAL_ALIGN_MIDDLE = import_jimp.default.VERTICAL_ALIGN_MIDDLE;
    this.VERTICAL_ALIGN_BOTTOM = import_jimp.default.VERTICAL_ALIGN_BOTTOM;
    this.EDGE_EXTEND = import_jimp.default.EDGE_EXTEND;
    this.EDGE_WRAP = import_jimp.default.EDGE_WRAP;
    this.EDGE_CROP = import_jimp.default.EDGE_CROP;
    this.MIME_BMP = import_jimp.default.MIME_BMP;
    this.MIME_X_MS_BMP = import_jimp.default.MIME_X_MS_BMP;
    this.MIME_GIF = import_jimp.default.MIME_GIF;
    this.MIME_JPEG = import_jimp.default.MIME_JPEG;
    this.MIME_PNG = import_jimp.default.MIME_PNG;
    this.MIME_TIFF = import_jimp.default.MIME_TIFF;
    this.PNG_FILTER_AUTO = import_jimp.default.PNG_FILTER_AUTO;
    this.PNG_FILTER_AVERAGE = import_jimp.default.PNG_FILTER_AVERAGE;
    this.PNG_FILTER_NONE = import_jimp.default.PNG_FILTER_NONE;
    this.PNG_FILTER_PATH = import_jimp.default.PNG_FILTER_PATH;
    this.PNG_FILTER_SUB = import_jimp.default.PNG_FILTER_SUB;
    this.PNG_FILTER_UP = import_jimp.default.PNG_FILTER_UP;
    this.RESIZE_NEAREST_NEIGHBOR = import_jimp.default.RESIZE_NEAREST_NEIGHBOR;
    this.RESIZE_BILINEAR = import_jimp.default.RESIZE_BILINEAR;
    this.RESIZE_BICUBIC = import_jimp.default.RESIZE_BICUBIC;
    this.RESIZE_HERMITE = import_jimp.default.RESIZE_HERMITE;
    this.RESIZE_BEZIER = import_jimp.default.RESIZE_BEZIER;
    this.PingFang_24_BLACK = (0, import_path.resolve)(__dirname, "PingFang_24_BLACK_CHINESE3500/PingFang_24_BLACK.fnt");
  }
  /**
   * 实例化 Jimp
   * @param args 
   * @returns Jimp
   */
  newJimp(...args) {
    return new import_jimp.default(...args);
  }
  async read(...args) {
    if (typeof args[0] === "string") {
      const path = args[0];
      const cb = args[1];
      if (cb) {
        return await import_jimp.default.read(path, cb);
      }
      return await import_jimp.default.read(path);
    } else if (Buffer.isBuffer(args[0])) {
      const data = args[0];
      const cb = args[1];
      if (cb) {
        return await import_jimp.default.read(data, cb);
      }
      return await import_jimp.default.read(data);
    } else if (args[0] instanceof import_jimp.default) {
      const image = args[0];
      const cb = args[1];
      if (cb) {
        return await import_jimp.default.read(image, cb);
      }
      return await import_jimp.default.read(image);
    } else {
      const width = args[0];
      const height = args[1];
      const background = args[2];
      const cb = args[3];
      if (cb) {
        return await import_jimp.default.read(width, height, background, cb);
      }
      return await import_jimp.default.read(width, height, background);
    }
  }
  /**
   * 调整图片大小
   * @param Jimpp 
   * @param w 
   * @param h 
   * @param cb 
   * @returns 
   */
  resize(Jimpp2, w, h, cb) {
    if (cb) {
      return Jimpp2.resize(w, h, cb);
    }
    return Jimpp2.resize(w, h);
  }
  /**
   * 裁剪图片
   * @param Jimpp 
   */
  crop(Jimpp2, x, y, w, h, cb) {
    if (cb) {
      return Jimpp2.crop(x, y, w, h, cb);
    }
    return Jimpp2.crop(x, y, w, h);
  }
  /**
   * 旋转图片
   * @param Jimpp 
   * @param deg 
   * @param callback 
   * @returns 
   */
  rotate(Jimpp2, deg, cb) {
    if (cb) {
      Jimpp2.rotate(deg, cb);
    }
    return Jimpp2.rotate(deg);
  }
  /**
   * 
   * @param Jimpp Jimp对象
   * @param path 保存的路径
   * @returns 
   */
  async writeAsync(Jimpp2, path) {
    return await Jimpp2.writeAsync(path);
  }
  /**
   * 
   * @param file 要加载的字体路径
   * @returns 
   */
  async loadFont(file) {
    return await import_jimp.default.loadFont(file);
  }
  /**
   * 
   * @param r red
   * @param g green
   * @param b blue
   * @param a alpha
   * @param cb callback function
   */
  rgbaToInt(r, g, b, a) {
    return import_jimp.default.rgbaToInt(r, g, b, a);
  }
  appendConstructorOption(name2, test, run) {
    return import_jimp.default.appendConstructorOption(name2, test, run);
  }
  /**
   * 
   * @param font 
   * @param text 
   * @param maxWidth 
   * @returns 
   */
  /**
   * 
   * @param font 字体
   * @param text 文本
   * @param maxWidth 宽带
   * @returns 
   */
  measureTextHeight(font, text, maxWidth) {
    return import_jimp.default.measureTextHeight(font, text, maxWidth);
  }
  /**
   * 
   * @param font 字体
   * @param text 文本
   * @returns 
   */
  measureText(font, text) {
    return import_jimp.default.measureText(font, text);
  }
  /**
   * 
   * @param n 
   * @returns 
   */
  limit255(n) {
    return import_jimp.default.limit255(n);
  }
  /**
   * 
   * @param i 要转为RGBA的数字
   * @returns 
   */
  intToRGBA(i) {
    return import_jimp.default.intToRGBA(i);
  }
  /**
   * 
   * @param img1 图片1
   * @param img2 
   * @returns 
   */
  distance(img1, img2) {
    return import_jimp.default.distance(img1, img2);
  }
  /**
   * 
   * @param img1 图片1
   * @param img2 
   * @param threshold 相似度，阈值
   * @returns 
   */
  diff(img1, img2, threshold) {
    return import_jimp.default.diff(img1, img2, threshold);
  }
  /**
   * 
   * @param cssColor css格式颜色
   * @returns 
   */
  cssColorToHex(cssColor) {
    return import_jimp.default.cssColorToHex(cssColor);
  }
  /**
   * 
   * @param path 路径
   * @returns 
   */
  create(path) {
    return import_jimp.default.create(path);
  }
  /**
   * 
   * @param hash1 
   * @param hash2 
   * @returns 
   */
  compareHashes(hash1, hash2) {
    return import_jimp.default.compareHashes(hash1, hash2);
  }
  /**
   * 
   * @param rgba1 
   * @param rgba2 
   * @returns 
   */
  colorDiff(rgba1, rgba2) {
    return import_jimp.default.colorDiff(rgba1, rgba2);
  }
};
((Jimp2) => {
  Jimp2.usage = (0, import_fs.readFileSync)((0, import_path.resolve)(__dirname, "../readme.md")).toString("utf-8");
  Jimp2.Config = import_koishi.Schema.object({});
})(Jimp || (Jimp = {}));
var src_default = Jimp;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  name
});
